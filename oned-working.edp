load "gmsh";
load "iovtk";
load "UMFPACK64";
load "isoline";
load "Element_P3";
load "msh3" 


bool addstem=true;
real endrelaxation=10;
bool printScreen=true;
int screenStep = 100;
// use lower surface tension at the beginning of simulation
int equilibraterho=0.002;


verbosity=0;
real PrintStep=100;

string foldern= "one-dim-analysis";
string command = "mkdir one-dim-analysis";
system(command);



// -------------------------------------------------------------------------------------------------------------------------------------
// Mesh and grid

border OX(t=0,4){x=t;y=0;} 
border OY(t=0,4){x=0;y=t;}

// Mesh resolution
int  n     = 2; // Number of segments per unit length
real refI  = 14.0; // Refinement factor for the interface
real mGrw  = 1.2;  // Growth rate of the mesh elements
int  dref  = 10; // Number of time-steps between mesh adaption

int m=1000;
int seglength=5;
func toretx = x*seglength;
func torety = 0;
func toretz = 0;
meshL Th=segment(m,[toretx,torety,toretz]);
plot(Th, cmm="NO ADAPTED MESH ",wait=true);

// -------------------------------------------------------------------------------------------------------------------------------------
// Fields
fespace Vhfield (Th,P2);
Vhfield phi;
Vhfield v;
Vhfield phiold;
Vhfield u;

Vhfield rho;
Vhfield rhoold;
Vhfield w;
Vhfield rhomesh;

Vhfield absdelphi;
Vhfield phiinterface;
Vhfield phibulk;
Vhfield rhointerface;
Vhfield rhooutside;

Vhfield RhoPhi;
Vhfield BoolRhoPhi;


Vhfield beforegral;
Vhfield postgral;

Vhfield maxrho;
Vhfield rhominusphi;


// -------------------------------------------------------------------------------------------------------------------------------------
// Compilation of macros

macro MakeRhoPhiMesh()
RhoPhi = phi * (rho * 2 - 1);
rhomesh = RhoPhi;
// EOM

real phimoved=0;
// Macro for non-linear solutions
macro solvePhase()
{

    rhointerface = (phi > 0.75) * (sqrt(dx(rho)^2 + dy(rho)^2)) * (rho < 0.55);
    BalanceDifferentiation;
    real overlap = int1d(Th) (rhointerface );
    real funcoverlap = overlap / (overlap^2 + 0.05);
    diffparam = diffrate/dt * funcoverlap;
    if (diffparam > 40)
        diffparam = 40;

    if (counter < endrelaxation)
    {

        relaxphasefield;
        RelaxRhoField;
    }
    else 
    {


        beforegral = (rho^2 * (3 - 2*rho)) * ((phi^2 * (3 - 2*rho)) - 1);
        RhoField;
        postgral = (rho^2 * (3 - 2*rho)) * ((phi^2 * (3 - 2*rho)) - 1);
        phasefield;
        phimoved = fmax(int1d(Th)(beforegral-postgral),0);
        phiold = phi;
    }
    A0 = A0 + phimoved;
    A0R = A0R + netrate;
    A0P = A0P + netrate;
}
// EOM

macro BalanceDifferentiation()
{
    diffamount = RhoDifferentiate;
}
//EOM



real phiArea=0.;
real rhoArea=0.;
real rhophiArea=0.;


macro GetArea()
    phiArea = int1d(Th)(phi^2 * (3 - 2*phi));
    rhophiArea = int1d(Th)((rho*phi)^2 * (3 - 2*(rho*phi)));
    phiArea = int1d(Th)(phi^2 * (3 - 2*phi));
// EOM


real epsilon=0.0006;     // smoothness
real gammaphi=0.;     // surface tension of phi

real eta = 0.002;             // viscosity type1
// real eta2 = 0.001;             // viscocity type2
real a = 0.5;               // Coefficient a (depracated)
real k = 0.001;               // phase width coefficient k (depracacted)
real lmda = 10;               // concentration constraint
real A0 = 3.143;              // Target value for A
real epseps = 1e-9;           // small prefactor for 1/sqrt
real dt = 0.00005;

real phitension=0.2;
real initaP = 0.5; // for equilibration (equal to phi)
real initkP = 0.0012; // for equilibration (equal to phi)
real trueaP = initaP*4;  //initaP * 15;
real truekP = initkP*4;// initkP * 15;
// the values i used to make video were 5 and 0.01

real aP = initaP;               // Coefficient a (increased need to be at 1 or 0, increase causes decreases interface length)
real kP = initkP;               // smoothness of interface transition, decrease causes decrease in interface length
real A0P = 3.143;              // Target value for A
real A0R = 0.;
real A0phi = 0.;
real diffparam = 0; // this is being treated dynamically.
real diffamount=0;
real diffrate =3e-4;
real addrate=3e-4;
real netrate=addrate-diffrate;


// Initial parameters of the drop
real dR = 1;  // Radius
real dxc= 1.5;  // x coordinate
real DropTh = 0.025;
real dRrho = 0.5;
real dxcRho = 2;

func RhoDifferentiate = int1d(Th) (dt * rhointerface * diffparam );


problem relaxphasefield(phi, v, master=0, solver=sparsesolver) // , 
    = int1d(Th) (  v * (phi)/dt  )
    //+ int2d(Th) (1/eta * (v * a * phi - 3*v*a*phi*phiold + 2*v*a*phi*phiold^2))
    // + int2d(Th) (1/eta * (k * (dx(v) *dx(phi) + dy(v) * dy(phi))))
    + int1d(Th) (1/eta * (v * 0.5 * phi - v* 1.5 * phi *phiold + v*phi*phiold^2))
    + int1d(Th) (1/eta * (epsilon * (dx(v) *dx(phi))))
    + int1d(Th) (1/eta * ( v * (12 * lmda *(phiArea-A0)*phi*(1-phiold))))
    - int1d(Th) (  v * (phiold)/dt  )
    +on(1,2,phi=0);


problem phasefield(phi, v, master=0, solver=sparsesolver) // , 
    = int1d(Th) (  v * (phi)/dt  )
    + int1d(Th) (1/eta * phitension * (v * 0.5 * phi - v* 1.5 * phi *phiold + v*phi*phiold^2))
    + int1d(Th) (1/eta *  phitension * (epsilon * (dx(v) *dx(phi))))
    + int1d(Th) (1/eta * ( v * (12 * lmda *(phiArea-A0)*phi*(1-phiold))))
    // - int2d(Th) (rhooutside * addrate * v)
    - int1d(Th) (  v * (phiold)/dt  )
    + int1d(Th) (1/eta * phi * (v * aP * rho - 3*v*aP*rho*rho + 2*v*aP*rho * rho^2))
    + int1d(Th) (1/eta * phi * (kP * (dx(rho) * dx(v) )))
    + int1d(Th) (1/eta * ( v * (12 * lmda *(rhoArea-A0P)*rho*(1-rho))))
    + int1d(Th) (1/eta * ( v * (12 * lmda *(rhophiArea-A0R)*rho*phi*phiold*(1-rhoold*phiold))));

problem RelaxRhoField(rho, w, master=0, solver=sparsesolver)
    = int1d(Th) (w * (rho)/dt )
    + int1d(Th) (1/eta * phi * (w * aP * rho - 3*w*aP*rho*rhoold + 2*w*aP*rho * rhoold^2))
    + int1d(Th) (1/eta * phi * (kP * (dx(w) *dx(rho))))
    + int1d(Th) (1/eta * ( w * (12 * lmda *(rhoArea-A0P)*rho*(1-rhoold))))
    + int1d(Th) (1/eta * ( w * (12 * lmda *(rhophiArea-A0R)*rho*phi*phiold*(1-rhoold*phiold))))
    - int1d(Th) ( w * (rhoold)/dt  );

problem RhoField(rho, w, master=0, solver=sparsesolver)
    = int1d(Th) (w * (rho)/dt )
    + int1d(Th) (1/eta * phi * rho * (w * aP - 3*w*aP*rhoold + 2*w*aP*rhoold^2))
    + int1d(Th) (1/eta * phi * (kP * (dx(w) *dx(rho) )))
    + int1d(Th) (1/eta * ( w * (12 * lmda *(rhoArea-A0P)*rho*(1-rhoold))))
    + int1d(Th) (1/eta * ( w * (12 * lmda *(rhophiArea-A0R)*rho*phi*phiold*(1-rhoold*phiold))))
    // in strong form (slightly in correc)
    // + int2d(Th) (rhointerface * diffparam * w ) // slightly incorrect ues of diffparam as constant,
    // in weak form 
    + int1d(Th) ((phi > 0.75) * (rhoold < 0.55) * diffparam * w * sqrt((dx(rhoold)^2) ))
    - int1d(Th) (rhooutside * addrate * w)
    - int1d(Th) ( w * (rhoold)/dt  );
    // + int2d(Th) (1/eta * ( (1-rhointerface) * gammaSL * (dx(w) *dx(rho) + dy(w) * dy(rho))))
    // + int2d(Th) (1/eta * (1-rhointerface) * phi * gammaSL * (dx(rho) * dx(w) + dy(rho) * dy(w)) / sqrt(dx(rhoold)^2 + dy(rhoold)^2 + epseps))



// Initialisation

func initPhi = 0.5 * (1-tanh((abs(x - dxc) - dR) / DropTh));
func initRho = 0.5 * (1 - tanh((abs(x-dxcRho)- dRrho) / DropTh));

phi = initPhi;
rho = initRho;



cout << "CURRENT AREA: " << phiArea << endl;
phi = fmin(phi,1);
phiold=phi;
rhoold=rho;
GetArea
A0 = phiArea;
A0P = rhoArea;
A0R = rhophiArea;
cout << "phi area is: " << A0 << endl;


real curt=0.0;

Vhfield xx=x;
Vhfield yy=y;

int maxcount = 10;
int counter = 0;
int OutPutCounter=0;
matrix Vphi;
matrix Vrho;
matrix Vdiff;
Vphi.resize(maxcount, Vhfield.ndof);
Vrho.resize(maxcount, Vhfield.ndof);
Vdiff.resize(maxcount, Vhfield.ndof);

while(OutPutCounter < maxcount)//(maxCFL > 1e-4)
{// SHOULD CUT SIMULATION WHEN RHO AREA ~0.15???? (when it is not circle this might need to be larger)

    ++counter;

    // solve equations
    curt = curt+dt;
    GetArea
    solvePhase

    // Prepare for the next time step
    rhoold = rho;
    phiold = phi;
      

    if (curt > equilibraterho)
    {
        kP = truekP;
        aP = trueaP;

        if (counter % 400 == 0)
        {
            Vhfield diffregion = ((phi > 0.75) * (rhoold < 0.55) * diffparam * sqrt(dx(rho)^2));
            for(int i=0; i< Vhfield.ndof; ++i)
            {
                Vphi(OutPutCounter, i) = phi[][i];
                Vrho(OutPutCounter, i) = rho[][i];
                Vdiff(OutPutCounter, i) = diffregion[][i];

                
            }  
            ++OutPutCounter;
        }

    }  



    if (counter % screenStep == 0)
    {
        plot(phi,fill=1,value=1,wait=false);
    }

}


string filen = foldern + "/phi_data.dat";
ofstream TheFile(filen);
for(int i=0; i< Vhfield.ndof; ++i)
{

    TheFile << xx[][i] << " " ;
    for (int j = 0; j<maxcount;++j)
    {
        TheFile << Vphi(j, i) << " ";
    }
    TheFile << endl; 
} 

filen = foldern + "/rho_data.dat";
ofstream TheFiler(filen);
for(int i=0; i< Vhfield.ndof; ++i)
{

    TheFiler << xx[][i] << " " ;
    for (int j = 0; j<maxcount;++j)
    {
        TheFiler << Vrho(j, i) << " ";
    }
    TheFiler << endl; 
} 

filen = foldern + "/diff_data.dat";
ofstream TheFiled(filen);
for(int i=0; i< Vhfield.ndof; ++i)
{

    TheFiled << xx[][i] << " " ;
    for (int j = 0; j<maxcount;++j)
    {
        TheFiled << Vdiff(j, i) << " ";
    }
    TheFiled << endl; 
} 