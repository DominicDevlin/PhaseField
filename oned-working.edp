load "gmsh";
load "iovtk";
load "UMFPACK64";
load "isoline";
load "Element_P3";
load "msh3" 



bool addstem=true;
real endrelaxation=10;
bool printScreen=true;
int screenStep = 100;
// use lower surface tension at the beginning of simulation
int equilibraterho=0.002;

for(int i=0;i<ARGV.n;++i)
{
    cout << ARGV[i] << endl;
}

if (ARGV.n > 3)
{
    printScreen = false;
}

verbosity=0;

string foldern= "one-dim-analysis/data";
string parstr = "";
string command = "mkdir one-dim-analysis";
string commandtwo = "mkdir one-dim-analysis/data";
system(command);
system(commandtwo);



// -------------------------------------------------------------------------------------------------------------------------------------
// Mesh and grid

border OX(t=0,4){x=t;y=0;} 
border OY(t=0,4){x=0;y=t;}

// Mesh resolution
int  n     = 2; // Number of segments per unit length
real refI  = 14.0; // Refinement factor for the interface
real mGrw  = 1.2;  // Growth rate of the mesh elements
int  dref  = 10; // Number of time-steps between mesh adaption

int m=1000;
int seglength=5;
func toretx = x*seglength;
func torety = 0;
func toretz = 0;
meshL Th=segment(m,[toretx,torety,toretz]);
if (printScreen)
    plot(Th, cmm="NO ADAPTED MESH ",wait=false);

// -------------------------------------------------------------------------------------------------------------------------------------
// Fields
fespace Vhfield (Th,P2);
Vhfield phi;
Vhfield v;
Vhfield phiold;
Vhfield u;

Vhfield rho;
Vhfield rhoold;
Vhfield w;
Vhfield rhomesh;

Vhfield absdelphi;
Vhfield phiinterface;
Vhfield phibulk;
Vhfield rhophiinterface;
Vhfield rhooutside;

Vhfield RhoPhi;
Vhfield BoolRhoPhi;


Vhfield beforegral;
Vhfield postgral;

Vhfield maxrho;
Vhfield rhominusphi;


// -------------------------------------------------------------------------------------------------------------------------------------
// Compilation of macros

macro MakeRhoPhiMesh()
RhoPhi = phi * (rho * 2 - 1);
rhomesh = RhoPhi;
// EOM

real phimoved=0;

Vhfield thismoving;
real sdown=0;

// Macro for non-linear solutions
macro solvePhase()
{
    if (dynamicdiff)
    {
        rhophiinterface = (phi > upperdifflimit) * phi * (rho < lowerdifflimit) * (sqrt(dx(rho)^2 + dy(rho)^2));
        BalanceDifferentiation;
        real overlap = int1d(Th) (rhophiinterface );
        real funcoverlap = overlap / (overlap^2 + 0.02);
        diffparam = diffrate/dt * funcoverlap;
    }

    BalanceDifferentiation;


    beforegral = (rho^2 * (3 - 2*rho)) * ((phi^2 * (3 - 2*rho)) - 1);
    RhoField;
    postgral = (rho^2 * (3 - 2*rho)) * ((phi^2 * (3 - 2*rho)) - 1);
    phasefield;
    phimoved = fmax(int1d(Th)(beforegral-postgral),0);

    if (phimoved < 0)
        phimoved = 0;

    thismoving = (phiold - phi) ;
    sdown = 0; int1d(Th)(thismoving * (phi > (rho + 0.3)) * (rho)^2 * (3 - 2*(rho)));
    cout << "sdown is: " << sdown << endl;  
    
    if (dynamicdiff)
    {
        real loss = netrate * diffamount;
        A0RP = A0RP - loss;
        A0P = A0P - loss;

        real maxadd = addproportion * diffamount;
        if (phimoved > maxadd)
            phimoved = maxadd;
        A0 = A0 + phimoved;
    }
    else
    {
        real gain = absgrowth - diffamount;
        A0RP = A0RP + gain - sdown;
        A0P = A0P + gain;
        if (phimoved > absgrowth)
            phimoved = absgrowth;
        A0 = A0 + phimoved;
    }
}
// EOM

macro BalanceDifferentiation()
{
    diffamount = RhoDifferentiate;
}
//EOM



real phiArea=0.;
real rhoArea=0.;
real rhophiArea=0.;


macro GetArea()
    phiArea = int1d(Th)(phi^2 * (3 - 2*phi));
    rhophiArea = int1d(Th)(phi * (rho)^2 * (3 - 2*(rho)));
    phiArea = int1d(Th)(phi^2 * (3 - 2*phi));
// EOM


real gammaphi=0.;     // surface tension of phi

real eta = 1;             // viscosity type1
real a = 1;               // Coefficient a 
real k = 0.001;               // phase width coefficient k
real lmda = 10;               // concentration constraint
real A0 = 3.143;              // Target value for A
real epseps = 1e-9;           // small prefactor for 1/sqrt
real dt = 0.01;

real upperdifflimit=0.6;
real lowerdifflimit=0.4;


real phitension=1;
real rhophitension=20;
real rhotension=0.02;

if (ARGV.n > 3)
{
    phitension = atof(ARGV[2]);
    rhotension = atof(ARGV[3]);
    parstr = "-" + ARGV[2] + "-" + ARGV[3];
}

cout << "phi tension is: " << phitension << endl;
cout << "rho tension is: " << rhotension << endl;

real A0P = 3.143;              // Target value for A
real A0RP = 0.;

bool dynamicdiff = false;

// dynamic 
real diffrate =0;//1e-4;// 1e-4;//1e-4;//1e-4;
real addproportion = 0.; // between 0 and 1
real addrate=addproportion * diffrate;//0.25e-4;//0.5e-4;
real netrate=1;
if (addrate > 0)
    netrate=(diffrate-addrate)/diffrate;

// non dynamic
real diffparam = 0.; // this is being treated dynamically if dynamic param is true.
real absgrowth = 0;

real diffamount=0;







func RhoDifferentiate = int1d(Th) (dt * (phi > upperdifflimit) * (rho < lowerdifflimit) * diffparam * phi * sqrt(dx(rho)^2 + dy(rho)^2));


problem relaxphasefield(phi, v, master=0, solver=sparsesolver) // , 
    = int1d(Th) (  v * (phi)/dt  )
    + int1d(Th) (1/eta * a * (0.5 * v * phi - v*1.5*phi*phiold + v*phi*phiold^2))
    + int1d(Th) (1/eta * (k * (dx(v) *dx(phi) + dy(v) * dy(phi))))
    + int1d(Th) (1/eta * ( v * (12 * lmda *(phiArea-A0)*phi*(1-phiold))))
    - int1d(Th) (  v * (phiold)/dt  )
    +on(1,2,phi=0);


problem phasefield(phi, v, master=0, solver=sparsesolver) // , 
    = int1d(Th) (  v * (phi)/dt  )
    + int1d(Th) (1/eta * phitension * a * (v* 0.5 * phi - v*1.5*phi*phiold + v*phi*phiold^2))
    + int1d(Th) (1/eta *  phitension * (k * (dx(v) *dx(phi) + dy(v) * dy(phi))))
    + int1d(Th) (1/eta * ( v * (12 * lmda *(phiArea-A0)*phi*(1-phiold))))
    - int1d(Th) (  v * (phiold)/dt  )
    + int1d(Th) (1/eta * phi * rhophitension * a * (v * 0.5 * rho - 1.5*v*rho*rho + v*rho * rho^2))
    + int1d(Th) (1/eta * phi * rhophitension * (k * (dx(rho) * dx(v) + dy(rho) * dy(v))))
    + int1d(Th) (1/eta * ( v * (12 * lmda *(rhophiArea-A0RP)*rho*phi*(1-rhoold))));


problem RhoField(rho, w, master=0, solver=sparsesolver)
    = int1d(Th) (w * (rho)/dt )
    + int1d(Th) (1/eta * rhotension * rho * a * (0.5 * w - 1.5*w*rhoold + w*rhoold^2))
    + int1d(Th) (1/eta * rhotension * (k * (dx(w) *dx(rho) + dy(w) * dy(rho))))
    + int1d(Th) (1/eta * phi * rho * rhophitension * a * (0.5 * w - 1.5*w*rhoold + w*rhoold^2))
    + int1d(Th) (1/eta * phi * rhophitension * (k * (dx(w) *dx(rho) + dy(w) * dy(rho))))
    + int1d(Th) (1/eta * ( w * (12 * lmda *(rhoArea-A0P)*rho*(1-rhoold))))
    + int1d(Th) (1/eta * ( w * (12 * lmda *(rhophiArea-A0RP)*rho*phi*(1-rhoold))))
    + int1d(Th) ((phi > upperdifflimit) * (rhoold < lowerdifflimit) * diffparam * w * sqrt(dx(rhoold)^2 + dy(rhoold)^2))
    - int1d(Th) ( w * (rhoold)/dt  );


// Initialisation


// Initial parameters of the drop
real dR = 1;  // Radius
real dxc= 1.5;  // x coordinate
real DropTh = sqrt((2*k)/a);
real dRrho = 0.5;
real dxcRho = 2;

func initPhi = 0.5 * (1-tanh((abs(x - dxc) - dR) / DropTh));
func initRho = 0.5 * (1 - tanh((abs(x-dxcRho)- dRrho) / DropTh));

phi = initPhi;
rho = initRho;



cout << "CURRENT AREA: " << phiArea << endl;
phi = fmin(phi,1);
phiold=phi;
rhoold=rho;
GetArea
A0 = phiArea;
A0P = rhoArea;
A0RP = rhophiArea;
cout << "phi area is: " << A0 << endl;


real curt=0.0;

Vhfield xx=x;
Vhfield yy=y;

int maxcount = 5;
int counter = 0;
int OutPutCounter=0;
matrix Vphi;
matrix Vrho;
matrix Vdiff;
Vphi.resize(maxcount, Vhfield.ndof);
Vrho.resize(maxcount, Vhfield.ndof);
Vdiff.resize(maxcount, Vhfield.ndof);

while(OutPutCounter < maxcount)//(maxCFL > 1e-4)
{// SHOULD CUT SIMULATION WHEN RHO AREA ~0.15???? (when it is not circle this might need to be larger)

    ++counter;

    // solve equations
    curt = curt+dt;
    GetArea
    solvePhase

    // Prepare for the next time step
    rhoold = rho;
    phiold = phi;
      

    if (curt > equilibraterho)
    {
        if (counter % 100 == 0)
        {
            cout << curt << endl;
            Vhfield diffregion = ((phi > 0.6) * (rhoold < 0.4) * sqrt(dx(rho)^2));
            for(int i=0; i< Vhfield.ndof; ++i)
            {
                Vphi(OutPutCounter, i) = phi[][i];
                Vrho(OutPutCounter, i) = rho[][i];
                Vdiff(OutPutCounter, i) = diffregion[][i];

                
            }  
            ++OutPutCounter;
        }

    }  


    if (counter % screenStep == 0 && printScreen)
    {
        plot(phi,fill=1,value=1,wait=false);
    }

}


string filen = foldern + "/phi_data" + parstr + ".dat";
ofstream TheFile(filen);
for(int i=0; i< Vhfield.ndof; ++i)
{

    TheFile << xx[][i] << " " ;
    for (int j = 0; j<maxcount;++j)
    {
        TheFile << Vphi(j, i) << " ";
    }
    TheFile << endl; 
} 

filen = foldern + "/rho_data" + parstr + ".dat";
ofstream TheFiler(filen);
for(int i=0; i< Vhfield.ndof; ++i)
{

    TheFiler << xx[][i] << " " ;
    for (int j = 0; j<maxcount;++j)
    {
        TheFiler << Vrho(j, i) << " ";
    }
    TheFiler << endl; 
} 

filen = foldern + "/diff_data" + parstr + ".dat";
ofstream TheFiled(filen);
for(int i=0; i< Vhfield.ndof; ++i)
{

    TheFiled << xx[][i] << " " ;
    for (int j = 0; j<maxcount;++j)
    {
        TheFiled << Vdiff(j, i) << " ";
    }
    TheFiled << endl; 
} 