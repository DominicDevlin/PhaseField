load "gmsh";
load "iovtk";
load "UMFPACK64";
load "isoline";
load "Element_P3";

real endsim=202;
real endrelaxation=0.1; // n steps before swapping to phase field main
bool printScreen=true;
int screenStep = 5;
real equilibraterho=1; // use lower rho surface tension at the beginning of simulation

bool RemoveCurvature = true;

string parstr = "";
string dirstr = "";
if (ARGV.n > 3)
{
    parstr = "-" + ARGV[2] + "-" + ARGV[3] + "-" + ARGV[4];
    dirstr =  ARGV[2] + "-" + ARGV[3] + "-" + ARGV[4] + "/";
    printScreen = false;
}

verbosity=0;
int PrintStep=100;
bool doPrint=true;
bool doTimespan=true;
int DataOutputStep=200;
bool printinterface=false;
bool PrintEnergy=true;
string folder1 = "images/" + dirstr + "composite/";
string folder2 = "images/" + dirstr + "c1/";
string folder3 = "images/" + dirstr + "c2/";

// string folderrhotwo = "images/" + dirstr + "rhotwo-images/";
string commandstart = "mkdir images";
string command0 = "mkdir images/" + dirstr;
string command1 = "mkdir images/" + dirstr + "composite";
string command2 = "mkdir images/" + dirstr + "c1";
string command3 = "mkdir images/" + dirstr + "c2";
// string command6 = "mkdir images/" + dirstr + "rhotwo-images";

bool makeData = true;

if (dirstr == "")
{
    dirstr = "data/";
}

string datafolder = "model-output/" + dirstr;
string datacommand1 = "mkdir model-output";
string datacommand2 = "mkdir model-output/" + dirstr;

if (makeData)
{
    system(datacommand1);
    system(datacommand2);
}

if (doPrint)
{
    system(commandstart);
    system(command0);
    system(command1);
    system(command2);
    system(command3);
}
   

// -------------------------------------------------------------------------------------------------------------------------------------
// Mesh and grid

real xmin =  -2;
real xmax =  2;
real ymin =  0;
real ymax =  6;

// Mesh resolution
int  n     = 2; // Number of segments per unit length
real refI  = 12; // Refinement factor for the interface
real mGrw  = 1.2;  // Growth rate of the mesh elements
int  dref  = 10; // Number of time-steps between mesh adaption

mesh Th = square((xmax-xmin)*n,(ymax-ymin)*n,[xmin+(xmax-xmin)*x,ymin+(ymax-ymin)*y]);

// -------------------------------------------------------------------------------------------------------------------------------------
// Fields
fespace Vhfield (Th,P2,periodic=[[2,y],[4,y],[1,x],[3,x]]);
// -------------------------------------------------------------------------------------------------------------------------------------




Vhfield c1;
Vhfield c2;
Vhfield c3;
Vhfield c1old;
Vhfield c2old;
Vhfield v;
Vhfield w;

Vhfield c12;
Vhfield c13;

Vhfield dummyc1old;
Vhfield absdelc1;
Vhfield c1interface;
Vhfield dummyv;
Vhfield dummyc1;

Vhfield c1curvature;
Vhfield c1precurvatureX;
Vhfield c1precurvatureY;
Vhfield c1divprecurvature;



real dt = 0.01;
real sig13=2;
real sig123 = 400;


if (ARGV.n > 3)
{
    sig13 = atof(ARGV[3]);
}

real epssq =0.001;
real eps = sqrt(epssq);
real eta=1;
real lmda = 120;
real epseps = 1e-9;
real Drate = 0;

real c1Area = 0;
real c3Area = 0;

real A0c1 = 1;
real A0c3 = 1;

// Is this the correct way to do this?? I'm not sure.
real TotalArea = (ymax-ymin) * (xmax-xmin);

macro GetArea()

    c1Area = int2d(Th)(c1^2 * (3 - 2*c1));


    c3Area =  TotalArea - c1Area

// EOM



problem SolveOne(c1, v, master=0, solver=sparsesolver)
    =int2d(Th)(v * (c1)/dt)

    + int2d(Th)(1/eta * v * sig13 * (4*c1old^3 -6*c1old^2 + 2*c1old))

    + int2d(Th)(1/eta * (epssq/2) * (2) * sig13 * (dx(c1) * dx(v) + dy(c1) * dy(v)))

    + int2d(Th)(1/eta * (epssq) * v * c1interface * (sig13*c1curvature) )

    + int2d(Th)(1/eta * ( v * lmda *(c1Area-A0c1)*c1*(1-c1old)))

    - int2d(Th)(v * c1old/dt);


problem SolveDummyc1(dummyc1, dummyv, master=0, solver=sparsesolver)

    =int2d(Th)(dummyv * sig13 * (dummyc1)/dt)

    + int2d(Th)(1/eta * sig13 * dummyv * (4*dummyc1old^3 -6*dummyc1old^2 + 2*dummyc1old))

    + int2d(Th)(1/eta * (epssq/2) * sig13 * (2) * (dx(dummyc1) * dx(dummyv) + dy(dummyc1) * dy(dummyv)))

    + int2d(Th)(1/eta * ( dummyv * lmda *(c1Area-A0c1)*dummyc1*(1-dummyc1old)))

    - int2d(Th)(dummyv * dummyc1old/dt);


macro getAdaptMesh()
Th = adaptmesh(Th,interfacemesh,hmin=1.0/(n*refI),hmax=1.0/n,iso=true,ratio=mGrw,err=0.01,nbvx=5e4,periodic=[[2,y],[4,y],[1,x],[3,x]]);
w=0;
v=0;
// EOM

Vhfield interfacemesh;
macro MakeMesh()
interfacemesh = c1;
// EOM

macro clip(f) ((f>1.)*1. + (f<0.)*0. + ((f>=0.)*(f<=1.))*f) // EOM
macro clip01(f) ((f<0.)*0. + ((f>=0.)*(f<=1.))*f) // EOM


real dR = 0.6;  // Radius
real dRrho = 0.4;  // Radius
real dxc= 0.0;  // x coordinate
real dyc= 3;  // y coordinate, 0.2 is start above gorund
real DropTh = 0.02;  // Drop thickness
real Lx = 3.0 * dR;  // x half-extent
real Ly = 1.0 * dR;  // y half-extent



/* ---------- rectangular band for  c1  ---------- */
real bandH   = 2.0;              // THICKNESS of the band
real bandYC  = 1.1;              // VERTICAL CENTRE of the band

// periodic distance in x so the band “wraps” cleanly across x = 0 and x = Lx
// func perX(real x) = min( abs(x)     , Lx - abs(x) );

/* 0-1 profile: value ≈1 inside the band, ≈0 outside */
// func initc1 = 0.5 * ( 1. - tanh( ( abs(y - bandYC) - bandH/2. ) / eps ) );
// func initc1 = 0.5* (1.-tanh(( max(abs((x - dxc) / 1.5), abs((y - 1.6) / Ly)) - 1.0 )/ DropTh));

// func initc1 = 0.5* (1.-tanh( (abs((y - 1.1)) - 1 )/ DropTh));    
func initc1 = 0.5 * (1.0 - tanh(( max(abs((x - dxc) / Lx), abs((y - 1.5) / Ly)) - 1.0 )/ DropTh));



// plot(c1, wait=true, fill=true, value=1);
// plot(c2, wait=true, fill=true, value=1);
c1 = initc1;
MakeMesh
getAdaptMesh


c1 = initc1;

MakeMesh
getAdaptMesh


c1 = initc1;

MakeMesh
getAdaptMesh

c1 = initc1;
c1old = c1;

GetArea;

// set constraints to initial areas
A0c1 = c1Area;
A0c3 = TotalArea - A0c1;

cout << c1Area << "\t" << c3Area << endl;

c1 = clip(initc1);

Vhfield sum12 = c1;
Vhfield factor  = 1.0 / max(1.0 , sum12);   // “./” is component-wise division
c1 = c1 * factor;   // rescale only where necessary



int nAdapt=0;
real curt=0.0;
// // Time stepping
int counter = 0;
bool recorded;
while(curt < endsim)//(maxCFL > 1e-4)
{
    // If needed, carry out mesh adaptation, solve again, adapt again
    if( nAdapt == dref)
    {
        // if (counter < 150)
        //     ElongateMesh(curt)
        cout << "    Mesh adpt 1, ";
        MakeMesh
        getAdaptMesh
        cout << endl;
        nAdapt++;
        nAdapt = 0;
        // n=20;
    }
    ++counter;
    if (counter % 10 == 0)
    {
        cout << "Time: " << curt << endl;
        // solve equations
        
        real c1mass = int2d(Th)(c1);
        cout << "c1 mass: " << c1Area << "  with constraint: " << A0c1 << endl;


        cout << "c3 mass: " << c3Area << "  with constraint: " << A0c3 << endl;
    }

    curt = curt+dt;
    c3=1-c1;

    if (RemoveCurvature)
    {

        c1precurvatureX = dx(c1) / sqrt(dx(c1)^2 + dy(c1)^2 + epseps);
        c1precurvatureY = dy(c1) / sqrt(dx(c1)^2 + dy(c1)^2 + epseps);
        c1divprecurvature = dx(c1precurvatureX) + dy(c1precurvatureY);
        c1curvature = sqrt(dx(c1)^2 + dy(c1)^2) * c1divprecurvature;

        if (counter % 4 == 0)
        {
            dummyc1 = c1;
            dummyc1old = dummyc1;
            for (int d = 0; d < 5; ++d)
            {
                SolveDummyc1;
                dummyc1old = dummyc1;        
            }
            absdelc1 = sqrt(dx(dummyc1)^2 + dy(dummyc1)^2);
            c1interface = (absdelc1 > 0.005);
        }
    }
    else
    {
        c1curvature=0;
    }

    
    SolveOne;


    GetArea;

    if (curt < endrelaxation)
    {
        A0c1 = c1Area;
        A0c3 = c3Area;
    }

    if (counter % screenStep == 0 && printScreen)
    {
        plot(c1curvature,fill=1,value=1, wait=false);
    }

    // Prepare for the next time step
    c1old=c1;

    // plot(c1, wait=true, fill=true, value=1);
    nAdapt++;


    if (counter % PrintStep == 0 && doPrint)
    {
        string outputn = folder1 + "image-" + curt + ".eps";
        plot(interfacemesh, ps=outputn, fill=1, value=true, wait=false);
        outputn = folder2 + "image-" + curt + ".eps";
        plot(c1, ps=outputn, fill=1, wait=false, value=true);
        outputn = folder3 + "image-" + curt + ".eps";

    }

    if (doTimespan && counter % DataOutputStep == 0)
    {
        string filen = datafolder + "c1-" + curt + ".dat";
        ofstream TheFile(filen);
        Vhfield xx=x;
        Vhfield yy=y;
        for(int i=0; i< Vhfield.ndof; ++i)
        {
            TheFile << xx[][i] << "\t" << yy[][i] << "\t" << c1[][i] << endl;
        }

    }

}