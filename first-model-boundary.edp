load "gmsh";
load "iovtk";
load "UMFPACK64";
load "isoline";
load "Element_P3";

verbosity=0;

real xmin =  -3;
real xmax =  3;
real ymin =  0;
real ymax =  6;


// Initial parameters of the drop
real dR = 1.0;  // Radius
real dxc= 0.0;  // x coordinate
real dyc= 1.0 + 0.2;  // y coordinate, 0.2 is start above gorund
real yct= dyc; // Variable to track the y coordinate of center of mass
real xct= dxc; // -;- x coordinate -;-

// Mesh resolution
int  n     = 4; // Number of segments per unit length
real refI  = 6.0; // Refinement factor for the interface
real mGrw  = 1.2;  // Growth rate of the mesh elements
int  dref  = 10; // Number of time-steps between mesh adaption



border a0(t=0,1){x=-3+2.5*t; y=0; label=1;}
border a1(t=0,1){x=-0.5; y=t; label=2;}
border a2(t=0,1){x=-0.5+t; y=1; label=3;}
border a3(t=0,1){x=0.5; y=1-t; label=4;}
border a4(t=0,1){x=0.5+2.5*t; y=0; label=5;}
border a5(t=0,1){x=3; y=6*t; label=6;}
border a6(t=0,1){x=3-6*t; y=6; label=7;}
border a7(t=0,1){x=-3; y=6-6*t; label=8;}

mesh Th = buildmesh(a0(10) + a1(10) + a2(10) + a3(10) + a4(10) + a5(10) + a6(10) + a7(10) );

// plot(NewH, wait=true);

// -------------------------------------------------------------------------------------------------------------------------------------
// Compilation of macros

// Mesh adaptation and destruction of the old mesh
macro getAdaptMesh()
Th = adaptmesh(Th,phi,hmin=1.0/(n*refI),hmax=1.0/n,iso=true,ratio=mGrw,err=0.01,nbvx=1e5,periodic=[[a5,y],[a7,y]]);
v = 0;
phi = phi;
// EOM

real stalkGrowthRate = 2.;

macro ElongateMesh(time)
real increase = time * stalkGrowthRate;
border a0(t=0,1){x=-3+2.5*t; y=0; label=1;}
border a1(t=0,1){x=-0.5; y=t*(1+increase); label=2;}
border a2(t=0,1){x=-0.5+t; y=1+increase; label=3;}
border a3(t=0,1){x=0.5; y=(1+increase)-t*(1+increase); label=4;}
border a4(t=0,1){x=0.5+2.5*t; y=0; label=5;}
border a5(t=0,1){x=3; y=6*t; label=6;}
border a6(t=0,1){x=3-6*t; y=6; label=7;}
border a7(t=0,1){x=-3; y=6-6*t; label=8;}
Th = buildmesh(a0(10) + a1(10) + a2(10) + a3(10) + a4(10) + a5(10) + a6(10) + a7(10) );
// EOM


// Macro for non-linear solutions
macro solvePhase()
phasefield;
cout << "phase done ";
// EOM

real phiArea=0.;

macro GetArea()
phiArea = int2d(Th)(phi^2 * (3 - 2*phi));
// EOM

real multiplier=1;

real eta = 0.005;             // viscosity
real a = 5*multiplier;               // Coefficient a
real k = 0.01*multiplier;               // phase width coefficient k
real lmda = 0.5;               // concentration constraint
real A0 = 3.143;              // Target value for A
real epseps = -1e-9;
real gamma = 0.0;
real dt = 0.001;

// adhesion to surface (negative means adhesion)
real gammas=-10;

fespace Vhfield (Th,P2,periodic=[[a5,y],[a7,y]]);//,[1,x],[3,x]]);// periodic=[[2,y],[4,y],[1,x],[3,x]]);
Vhfield phi;
Vhfield v;
Vhfield phiold;

real DropTh = 0.025;
// Initialise the drop
func initPhi = 0.5 * (1 - tanh((sqrt((x-dxc)^2 + (y-1-dyc)^2) - dR) / (sqrt(2) * DropTh)));
// func initPhi = 0.5 * (1-tanh((abs(x - dxc) + abs(y - dyc) - dR) / sqrt(2) / DropTh));



problem phasefield(phi, v, master=0, solver=sparsesolver) // , 
    = int2d(Th) (  v * (phi)/dt  )
    + int2d(Th) (1/eta * (v * a * phi - 3*v*a*phi*phiold + 2*v*a*phi*phiold^2))
    + int2d(Th) (1/eta * (k * (dx(v) *dx(phi) + dy(v) * dy(phi))))
    + int2d(Th) (1/eta * (gamma* (dx(v) * dx(phi) + dy(v) * dy(phi)) / (dx(phiold)^2 + dy(phiold)^2 + epseps)))
    + int2d(Th) (1/eta * ( v * (12 * lmda *(phiArea-A0)*phi*(1-phiold))))
    - int2d(Th) (  v * (phiold)/dt  )
    + int1d(Th,2,3,4)(gammas*phi*v);
    // + on(2, 3, 4, phi=0);
    // + on(3, phi=1);
               
               
// Initialisation
phi = initPhi;
// Initial mesh adaptation
getAdaptMesh
// Reinitialise the function, since it has a known value, adapt mesh again
phi = initPhi;
getAdaptMesh
// Reinitialise the function, since it has a known value, adapt mesh again
phi = initPhi;
getAdaptMesh
// Final initialisation of the function
phi = initPhi;
cout << "CURRENT AREA: " << phiArea << endl;
phiold=phi;

GetArea
A0 = phiArea;
cout << "A0 is: " << A0 << endl;

// Plot initial mesh and pf distribution
//plot(t,fill=1,value=1);
plot(Th, wait=true);
//plot(u,fill=1,value=1);
plot(phi,fill=1,value=1);
// plot(fi,fill=1,value=1);


int nAdapt=0;
real curt=0.0;
// // Time stepping
real divChck, dxdtChck = 10.0, dxOld = 0.0, dxNew;
int  NstedChck = 0;
// continue simulation until CFL condition fails
int counter = 0;
while(true)//(maxCFL > 1e-4)
{
    cout << "starting..." << endl;
    // If needed, carry out mesh adaptation, solve again, adapt again
    if( nAdapt == dref)
    {
        ElongateMesh(curt)
        cout << "    Mesh adpt 1, ";
        getAdaptMesh
        cout << endl;
        nAdapt++;
        // plot(Th, wait=true);
        nAdapt = 0;
    }
    ++counter;

    // if (counter % 300 == 1)
    //     plot(Th, wait=true);
    // Solve the PF equations
    curt = curt+dt;
    cout << "ct = " << curt << ", ";

    GetArea
    solvePhase
    cout << phiArea << endl;
    plot(phi,fill=1,value=1);    



    // Prepare for the next time step
    phiold = phi;
    dxOld = dxNew;
    nAdapt++;
    // plot(fi,fill=1,value=1);
    plot(phi,fill=1,value=1, wait=false);

    // plot(Th, wait=true);
    // plot(u,fill=1,value=1);
}
