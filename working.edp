load "gmsh";
load "iovtk";
load "UMFPACK64";
load "isoline";
load "Element_P3";


bool addstem=true;
real endrelaxation=10;
bool printScreen=true;
int screenStep = 5;
// use lower surface tension at the beginning of simulation
int equilibraterho=0.005;


verbosity=0;
real PrintStep=100;
bool doPrint=true;
bool printinterface=true;
string foldern = "images/phirho-images/";
string folderint1 = "images/interface1/";
string folderint2 = "images/interface2/";
string folderphi = "images/phi-images/";
string folderrho = "images/rho-images/";
string command0 = "mkdir images";
string command1 = "mkdir images/phirho-images";
string command2 = "mkdir images/interface1";
string command3 = "mkdir images/interface2";
string command4 = "mkdir images/phi-images";
string command5 = "mkdir images/rho-images";

bool makeData = true;
string datafolder = "model-output";
string datacommand = "mkdir model-output";

if (makeData)
{
    system(datacommand);
}


if (doPrint)
{
    system(command0);
    if (printinterface)
    {
        system(command2);
        system(command3);
    }
    system(command1);
    system(command4);
    system(command5);
}
   

// -------------------------------------------------------------------------------------------------------------------------------------
// Mesh and grid

real xmin =  -1;
real xmax =  1;
real ymin =  0;
real ymax =  4;

// Mesh resolution
int  n     = 2; // Number of segments per unit length
real refI  = 14.0; // Refinement factor for the interface
real mGrw  = 1.2;  // Growth rate of the mesh elements
int  dref  = 10; // Number of time-steps between mesh adaption


mesh Th = square((xmax-xmin)*n,(ymax-ymin)*n,[xmin+(xmax-xmin)*x,ymin+(ymax-ymin)*y]);

// -------------------------------------------------------------------------------------------------------------------------------------
// Fields
fespace Vhfield (Th,P2,periodic=[[2,y],[4,y],[1,x],[3,x]]);
Vhfield phi;
Vhfield v;
Vhfield phiold;
Vhfield u;

Vhfield rho;
Vhfield rhoold;
Vhfield w;
Vhfield rhomesh;

Vhfield absdelphi;
Vhfield phiinterface;
Vhfield phibulk;
Vhfield rhointerface;
Vhfield rhooutside;

Vhfield RhoPhi;
Vhfield BoolRhoPhi;
Vhfield curvature;

Vhfield precurvatureX;
Vhfield precurvatureY;
Vhfield divprecurvature;

Vhfield beforegral;
Vhfield postgral;

Vhfield maxrho;
Vhfield rhominusphi;


// -------------------------------------------------------------------------------------------------------------------------------------
// Compilation of macros

// Mesh adaptation and destruction of the old mesh
macro getAdaptMesh()
Th = adaptmesh(Th,rhomesh,hmin=1.0/(n*refI),hmax=1.0/n,iso=true,ratio=mGrw,err=0.01,nbvx=4e4,periodic=[[2,y],[4,y],[1,x],[3,x]]);
v = 0;
w=0;
phi = phi;
// EOM

macro MakeRhoPhiMesh()
RhoPhi = phi * (rho * 2 - 1);
rhomesh = RhoPhi;
// EOM
// phi*(rho - (1-rho));

    // precurvatureX = dx(phi) / sqrt(dx(phi)^2 + dy(phi)^2 + epseps);
    // precurvatureY = dy(phi) / sqrt(dx(phi)^2 + dy(phi)^2 + epseps);
    // divprecurvature = dx(precurvatureX) + dy(precurvatureY);
    // curvature = sqrt(dx(phi)^2 + dy(phi)^2) * divprecurvature;

real phimoved=0;
// Macro for non-linear solutions
macro solvePhase()
{

    rhooutside = (phi < 0.5) * (sqrt(dx(rho)^2 + dy(rho)^2));
    rhooutside = (rhooutside > 2);
    rhointerface = (phi > 0.75) * (sqrt(dx(rho)^2 + dy(rho)^2)) * (rho < 0.55) * phi;
    BalanceDifferentiation;
    real overlap = int2d(Th) (rhointerface );
    real funcoverlap = overlap / (overlap^2 + 0.02);
    diffparam = diffrate/dt * funcoverlap;

    if (counter < endrelaxation)
    {
        absdelphi = sqrt(dx(dummyphi)^2 + dy(dummyphi)^2);
        phibulk = (absdelphi < 0.1) * dummyphi;
        phiinterface = (absdelphi * dummyphi > 0.04);
        relaxphasefield;
        RelaxRhoField;
    }
    else 
    {

        precurvatureX = dx(phi) / sqrt(dx(phi)^2 + dy(phi)^2 + epseps);
        precurvatureY = dy(phi) / sqrt(dx(phi)^2 + dy(phi)^2 + epseps);
        divprecurvature = dx(precurvatureX) + dy(precurvatureY);
        curvature = sqrt(dx(phi)^2 + dy(phi)^2) * divprecurvature;

        beforegral = (rho^2 * (3 - 2*rho)) * ((phi^2 * (3 - 2*rho)) - 1);
        RhoField;
        postgral = (rho^2 * (3 - 2*rho)) * ((phi^2 * (3 - 2*rho)) - 1);
        phasefield;
        phimoved = fmax(int2d(Th)(beforegral-postgral),0);
        phiold = phi;
        
    }
    A0 = A0 + phimoved;
    A0R = A0R + netrate;
    A0P = A0P + netrate;

        
}
// EOM

macro BalanceDifferentiation()
{
    diffamount = RhoDifferentiate;
}
//EOM
// real addamount = NoParamRhoAdd;
// addrate = diffamount / addamount;
// if (!addstem)
//     addrate=0.;

// if (!addstem)
// {
//     A0 = A0;
//     A0P = A0P - phimoved;
//     A0R = A0R - phimoved;
// }
// else
// {
//     A0 = A0 + phimoved;
// }


real phiArea=0.;
real rhoArea=0.;
real rhophiArea=0.;


macro GetArea()
    rhoArea = int2d(Th)(rho^2 * (3 - 2*rho));
    rhophiArea = int2d(Th)((rho*phi)^2 * (3 - 2*(rho*phi)));
    phiArea = int2d(Th)(phi^2 * (3 - 2*phi));

// EOM


real epsilon=0.0006;     // smoothness
real gammaphi=0.;     // surface tension of phi

real eta = 0.002;             // viscosity type1
// real eta2 = 0.0002;             // viscocity type2
real a = 0.5;               // Coefficient a (depracated)
real k = 0.001;               // phase width coefficient k (depracacted)
real lmda = 10;               // concentration constraint
real A0 = 3.143;              // Target value for A
real epseps = 1e-9;           // small prefactor for 1/sqrt
real dt = 0.00005;

real phitension=0.2;
real initaP = 0.5; // for equilibration (equal to phi)
real initkP = 0.0012; // for equilibration NOTE: MIGHT BE BETTER AT DOUBLE PHI!! (equal to phi)
real trueaP = initaP*10;  //initaP * 15;
real truekP = initkP*10;// initkP * 15;
// the values i used to make video were 5 and 0.01

real aP = initaP;               // Coefficient a (increased need to be at 1 or 0, increase causes decreases interface length)
real kP = initkP;               // smoothness of interface transition, decrease causes decrease in interface length
real A0P = 3.143;              // Target value for A
real A0R = 0.;
real A0phi = 0.;
real diffparam = 6; // this is being treated dynamically.
real diffamount=0;
real diffrate = 1e-4;
real addrate=0.5e-4;
real netrate=addrate-diffrate;



// adhesion to surface (negative means adhesion), currently depracated.
real gammas=10;
// adhesion between two cell types
real gammaSL=0.0;


// Initial parameters of the drop
real dR = 0.6;  // Radius
real dRrho = 0.4;  // Radius
real dxc= 0.0;  // x coordinate
real dyc= 1.0 + 0.2;  // y coordinate, 0.2 is start above gorund
real DropTh = 0.025;

problem relaxphasefield(phi, v, master=0, solver=sparsesolver) // , 
    = int2d(Th) (  v * (phi)/dt  )
    //+ int2d(Th) (1/eta * (v * a * phi - 3*v*a*phi*phiold + 2*v*a*phi*phiold^2))
    // + int2d(Th) (1/eta * (k * (dx(v) *dx(phi) + dy(v) * dy(phi))))
    + int2d(Th) (1/eta * (v * 0.5 * phi - v* 1.5 * phi *phiold + v*phi*phiold^2))
    + int2d(Th) (1/eta * (epsilon * (dx(v) *dx(phi) + dy(v) * dy(phi))))
    + int2d(Th) (1/eta * ( v * (12 * lmda *(phiArea-A0)*phi*(1-phiold))))
    - int2d(Th) (  v * (phiold)/dt  );

/* the below equation has the curvature term removed*/
problem phasefield(phi, v, master=0, solver=sparsesolver) // , 
    = int2d(Th) (  v * (phi)/dt  )
    + int2d(Th) (1/eta * phitension * (v * 0.5 * phi - v* 1.5 * phi *phiold + v*phi*phiold^2))
    + int2d(Th) (1/eta *  phitension * (epsilon * (dx(v) *dx(phi) + dy(v) * dy(phi))))
    // + int2d(Th) ( phiinterface * (1/eta * ((epsilon - gammaphi) * v * curvature)))
    + int2d(Th) ( (1/eta * phitension * phiinterface * ((epsilon) * v * curvature)))
    + int2d(Th) (1/eta * ( v * (12 * lmda *(phiArea-A0)*phi*(1-phiold))))
    // - int2d(Th) (rhooutside * addrate * v)
    - int2d(Th) (  v * (phiold)/dt  )
    + int2d(Th) (1/eta * phi * (v * aP * rho - 3*v*aP*rho*rho + 2*v*aP*rho * rho^2))
    + int2d(Th) (1/eta * phi * (kP * (dx(rho) * dx(v) + dy(rho) * dy(v))))
    + int2d(Th) (1/eta * ( v * (12 * lmda *(rhoArea-A0P)*rho*(1-rho))))
    + int2d(Th) (1/eta * ( v * (12 * lmda *(rhophiArea-A0R)*rho*phi*phiold*(1-rhoold*phiold))));
    // + int2d(Th) (1/eta * (1-rhointerface) * phi * gammaSL * (dx(rho) * dx(v) + dy(rho) * dy(v)) / sqrt(dx(rhoold)^2 + dy(rhoold)^2 + epseps));
    // + int2d(Th) (1/eta * ( v * (20000 * lmda * rigidityconstraint * (rigidphifield > 0.001) * (phi/fmax(rigidphifield,epseps)-1/fmax(rigidphifield,epseps)))));
    // - int2d(Th) (1/eta * ( v * (100 * lmda * rigidityconstraint * rigidphifield)));


func RhoDifferentiate = int2d(Th) (dt * rhointerface * diffparam );
func NoParamRhoAdd = int2d(Th) (dt * rhooutside);


problem RelaxRhoField(rho, w, master=0, solver=sparsesolver)
    = int2d(Th) (w * (rho)/dt )
    + int2d(Th) (1/eta * phi * (w * aP * rho - 3*w*aP*rho*rhoold + 2*w*aP*rho * rhoold^2))
    + int2d(Th) (1/eta * phi * (kP * (dx(w) *dx(rho) + dy(w) * dy(rho))))
    + int2d(Th) (1/eta * ( w * (12 * lmda *(rhoArea-A0P)*rho*(1-rhoold))))
    + int2d(Th) (1/eta * ( w * (12 * lmda *(rhophiArea-A0R)*rho*phi*phiold*(1-rhoold*phiold))))
    - int2d(Th) ( w * (rhoold)/dt  );

problem RhoField(rho, w, master=0, solver=sparsesolver)
    = int2d(Th) (w * (rho)/dt )
    + int2d(Th) (1/eta * phi * rho * (w * aP - 3*w*aP*rhoold + 2*w*aP*rhoold^2))
    + int2d(Th) (1/eta * phi * (kP * (dx(w) *dx(rho) + dy(w) * dy(rho))))
    + int2d(Th) (1/eta * ( w * (12 * lmda *(rhoArea-A0P)*rho*(1-rhoold))))
    + int2d(Th) (1/eta * ( w * (12 * lmda *(rhophiArea-A0R)*rho*phi*phiold*(1-rhoold*phiold))))
    // in strong form (slightly in correc)
    // + int2d(Th) (rhointerface * diffparam * w ) // slightly incorrect ues of diffparam as constant,
    // in weak form 
    + int2d(Th) ((phi > 0.75) * (rhoold < 0.55) * diffparam * w * phi * sqrt(dx(rhoold)^2 + dy(rhoold)^2))

    - int2d(Th) ( w * (rhoold)/dt  );
    // + int2d(Th) (1/eta * ( (1-rhointerface) * gammaSL * (dx(w) *dx(rho) + dy(w) * dy(rho))))
    // + int2d(Th) (1/eta * (1-rhointerface) * phi * gammaSL * (dx(rho) * dx(w) + dy(rho) * dy(w)) / sqrt(dx(rhoold)^2 + dy(rhoold)^2 + epseps))
    // - int2d(Th) (rhooutside * addrate * w)


Vhfield dummyphi;
Vhfield dummyphiold;
Vhfield dummyv;
real dtau = 0.00001;

problem DummyPhaseField(dummyphi, dummyv, master=0, solver=sparsesolver) // , 
    = int2d(Th) (  dummyv * (dummyphi)/dtau  )
    + int2d(Th) (1/eta * (dummyv * 0.5 * dummyphi - 1.5*dummyv*dummyphi*phiold + dummyv*dummyphi*phiold^2))
    + int2d(Th) (1/eta * (epsilon * (dx(dummyv) *dx(dummyphi) + dy(dummyv) * dy(dummyphi))))
    + int2d(Th) (1/eta * ( dummyv * (12 * lmda *(phiArea-A0)*dummyphi*(1-phiold))))
    - int2d(Th) (  dummyv * (dummyphiold)/dtau  );



// Initialisation

func initPhi = 0.5 * (1-tanh((abs(y - dyc + 0.5) - dR) / DropTh))// 0.5 * (1 - tanh((sqrt((x-dxc)^2 + (y-0.4-dyc)^2) - dR) / (sqrt(2) * DropTh)))
 + 0.5 * (1 - tanh((sqrt((x-dxc)^2 + (y-0.4-dyc)^2) - dRrho) / (sqrt(2) * DropTh)));
func initRho = 0.5 * (1 - tanh((sqrt((x-dxc)^2 + (y-0.4-dyc)^2) - dRrho) / (sqrt(2) * DropTh)));

phi = initPhi;
rho = initRho;

MakeRhoPhiMesh
// Initial mesh adaptation
getAdaptMesh
// Reinitialise the function, since it has a known value, adapt mesh again
phi = initPhi;
rho = initRho;
MakeRhoPhiMesh
getAdaptMesh
// Reinitialise the function, since it has a known value, adapt mesh again
phi = initPhi;
rho = initRho;
MakeRhoPhiMesh
getAdaptMesh
// Final initialisation of the function
phi = initPhi;
rho = initRho;
MakeRhoPhiMesh
cout << "CURRENT AREA: " << phiArea << endl;
phi = fmin(phi,1);
phiold=phi;
rhoold=rho;
real overlapcheck = int2d(Th)((phi>1.001) * phi);
GetArea
A0 = phiArea-overlapcheck;
A0P = rhoArea;
A0R = rhophiArea;
cout << "phi area is: " << A0 << endl;
cout << "rho area is: " << A0P << endl;


// plot(Th, wait=true);


int nAdapt=0;
real curt=0.0;
// // Time stepping
int counter = 0;
while(true)//(maxCFL > 1e-4)
{
    // If needed, carry out mesh adaptation, solve again, adapt again
    if( nAdapt == dref)
    {
        // if (counter < 150)
        //     ElongateMesh(curt)
        cout << "    Mesh adpt 1, ";
        getAdaptMesh
        cout << endl;
        nAdapt++;
        // plot(Th, wait=true);
        nAdapt = 0;
    }
    ++counter;

    // solve equations
    curt = curt+dt;
    GetArea
    solvePhase
    if (counter % 20 == 0)
    {
        cout << "ct = " << curt << ", ";
        cout << "phi area: " << phiArea << "  with constraint: " << A0 << endl;
        cout << "rho area: " << rhoArea << "  with constraint: " << A0P << endl;
        cout << "rhophi area: " << rhophiArea << " with constraint: " << A0R << endl;
        cout << "Value of addition param: " << addrate << endl;
    }

    // Prepare for the next time step
    rhoold = rho;
    phiold = phi;
    nAdapt++;
    if (curt > equilibraterho)
    {
        kP = truekP;
        aP = trueaP;
    }    

    if (counter % 5 == 0)
    {
        dummyphi = phi;
        dummyphiold = dummyphi;
        // dummyv = v;
        for (int d = 0; d < 3; ++d)
        {
            DummyPhaseField;
            dummyphiold = dummyphi;            
            
        }

        absdelphi = sqrt(dx(dummyphi)^2 + dy(dummyphi)^2);
        phibulk = (absdelphi < 0.3) * dummyphi;
        phiinterface = (absdelphi > 2);

    
    }


    Vhfield boolRhoPhitoPlot = (RhoPhi < -0.2)*RhoPhi + (RhoPhi > 0.2)*RhoPhi;

    MakeRhoPhiMesh

    // Vhfield nablaphi;
    // nablaphi = (sqrt(dx(phi)^2 + dy(phi)^2));
    // Vhfield tmp = ((phi > 0.75) * (rhoold < 0.55) * phi * diffparam * sqrt(dx(rho)^2+ dy(rho)^2));
    // Vhfield tmp = ((phi > 0.75) * (rhoold < 0.55) * phi * diffparam * (dx(rho)*dx(rho)+ dy(rho)*dy(rho))/sqrt(dx(rhoold)^2 + dy(rhoold)^2 + epseps));

    if (counter % screenStep == 0 && printScreen)
    {
        plot(RhoPhi,fill=1,value=1, wait=false);
    }

    if (counter % PrintStep == 0 && doPrint)
    {
        string outputn = foldern + "image-" + curt + ".eps";
        plot(boolRhoPhitoPlot, ps=outputn, fill=1, wait=false);
        outputn = folderphi + "image-" + curt + ".eps";
        plot(phi, ps=outputn, fill=1, wait=false, value=true);
        outputn = folderrho + "image-" + curt + ".eps";
        plot(rho, ps=outputn, fill=1, wait=false, value=true);

    }
    
    if (counter % 200 == 0 && printinterface)
    {
        string outputn2 = folderint1 + "image-" + curt + ".eps";
        string outputn3 = folderint2 + "image-" + curt + ".eps";
        plot(rhointerface, ps=outputn2, fill=1, wait=false);
        plot(rhooutside, ps=outputn3, fill=1, wait=false);
    }
    
    // if (counter % 20 == 10)
    //     plot(rhointerface,fill=1,value=1, wait=false);
    

    // Vhfield check = phi * (1 - rho);
    // plot(check,fill=1,value=1, wait=false);
    // plot(rho,fill=1,value=1, wait=true);

    if (makeData && counter==30)
    {
        // matrix Vphi;
        // matrix Vrho;
        // matrix Vdiff;
        // Vphi.resize(maxcount, Vhfield.ndof);
        // Vrho.resize(maxcount, Vhfield.ndof);
        // Vdiff.resize(maxcount, Vhfield.ndof);
        string filen = datafolder + "/phi_data.dat";
        ofstream TheFile(filen);
        Vhfield xx=x;
        Vhfield yy=y;
        for(int i=0; i< Vhfield.ndof; ++i)
        {
            TheFile << xx[][i] << "\t" << yy[][i] << "\t" << phi[][i] << endl;
        }
    }
}

// Vhfield diffrho;
// Vhfield diffrhoold;
// Vhfield diffw;
// real diffaP = 0.1;
// real diffkP = 10;
// real diffA0P;
// real diffrhoArea;
// real drtau=0.0001;

// problem DiffuseRhoField(diffrho, diffw, master=0, solver=sparsesolver)
//     = int2d(Th) (diffw* (diffrho)/drtau )
//     + int2d(Th) (1/eta * (diffw * diffaP * diffrho - 3*diffw*diffaP*diffrho*rhoold + 2*diffw*diffaP*diffrho * diffrhoold^2))
//     + int2d(Th) (1/eta * (kP * (dx(diffw) *dx(diffrho) + dy(diffw) * dy(diffrho))))
//     + int2d(Th) (1/eta * ( diffw * (12 * lmda *(diffrhoArea-diffA0P)*diffrho*(1-diffrhoold))))
//     - int2d(Th) ( diffw * (diffrhoold)/drtau  );

    // if (counter == 100)
    // {
    //     diffrho = rho*2;
    //     diffrho = (diffrho > 1.1) * 1.1 + (diffrho < 1.1) * diffrho;
    //     diffrhoold = diffrho;
    //     diffA0P = int2d(Th)(diffrho^2 * (3 - 2*diffrho));
    //     diffrhoArea = diffA0P;

    //     for (int dp = 0; dp < 100; ++dp)
    //     {
    //         plot(diffrho, value=true, fill=true, wait=false);
    //         DiffuseRhoField;
    //         diffrhoArea = int2d(Th)(diffrho^2 * (3 - 2*diffrho));
    //         diffrhoold = diffrho;
            
    //     }
    //     // apply square root three times to increase width
    //     diffrho = sqrt(fmax(diffrho,0) + epseps);
    //     diffrho = sqrt(fmax(diffrho,0) + epseps);
    //     diffrho = sqrt(fmax(diffrho,0) + epseps);
    //     // apply sigmoid to sharpen boundary around 0.5
    //     diffrho = diffrho^5 / (diffrho^5 + (1-diffrho)^5);
    //     // plot(diffrho, wait=false, fill=true, value=true);
    //     // ensure max at 1 and min at 0
    //     rigidityconstraint = 1 - diffrho;
        
    //     rigidphifield = phi;
    // }