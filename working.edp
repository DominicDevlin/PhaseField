load "gmsh";
load "iovtk";
load "UMFPACK64";
load "isoline";
load "Element_P3";

verbosity=0;

real xmin =  -3;
real xmax =  3;
real ymin =  0;
real ymax =  6;


// Initial parameters of the drop
real dR = 0.6;  // Radius
real dxc= 0.0;  // x coordinate
real dyc= 1.0 + 0.2;  // y coordinate, 0.2 is start above gorund
real yct= dyc; // Variable to track the y coordinate of center of mass
real xct= dxc; // -;- x coordinate -;-

// Mesh resolution
int  n     = 4; // Number of segments per unit length
real refI  = 10.0; // Refinement factor for the interface
real mGrw  = 1.2;  // Growth rate of the mesh elements
int  dref  = 10; // Number of time-steps between mesh adaption



real boundlength = 1.;
border a0(t=0,1){x=-3+2.5*t; y=0; label=1;}
border a1(t=0,1){x=-0.5; y=t*boundlength; label=2;}
border a2(t=0,1){x=-0.5+t; y=boundlength; label=3;}
border a3(t=0,1){x=0.5; y=boundlength-t; label=4;}
border a4(t=0,1){x=0.5+2.5*t; y=0; label=5;}
border a5(t=0,1){x=3; y=6*t; label=6;}
border a6(t=0,1){x=3-6*t; y=6; label=7;}
border a7(t=0,1){x=-3; y=6-6*t; label=8;}

mesh Th = buildmesh(a0(10) + a1(10) + a2(10) + a3(10) + a4(10) + a5(10) + a6(10) + a7(10) );

// plot(NewH, wait=true);

// -------------------------------------------------------------------------------------------------------------------------------------
// Compilation of macros
real stalkGrowthRate = 2.;

macro ElongateMesh(time)
real increase = time * stalkGrowthRate;
border a0(t=0,1){x=-3+2.5*t; y=0; label=1;}
border a1(t=0,1){x=-0.5; y=t*(boundlength+increase); label=2;}
border a2(t=0,1){x=-0.5+t; y=boundlength+increase; label=3;}
border a3(t=0,1){x=0.5; y=(boundlength+increase)-t*(boundlength+increase); label=4;}
border a4(t=0,1){x=0.5+2.5*t; y=0; label=5;}
border a5(t=0,1){x=3; y=6*t; label=6;}
border a6(t=0,1){x=3-6*t; y=6; label=7;}
border a7(t=0,1){x=-3; y=6-6*t; label=8;}
Th = buildmesh(a0(10) + a1(10) + a2(10) + a3(10) + a4(10) + a5(10) + a6(10) + a7(10) );
// EOM

// Mesh adaptation and destruction of the old mesh
macro getAdaptMesh()
Th = adaptmesh(Th,rhomesh,hmin=1.0/(n*refI),hmax=1.0/n,iso=true,ratio=mGrw,err=0.01,nbvx=1e5,periodic=[[a5,y],[a7,y]]);
v = 0;
phi = phi;
// EOM

macro RhoPhi()
RhoPhitoPlot = phi * (rho * 2 - 1);
rhomesh = RhoPhitoPlot;
// EOM
// phi*(rho - (1-rho));

// Macro for non-linear solutions
macro solvePhase()
visc = (1 - phi * rho) * eta1 + rho * eta2;

phicopy = phi;

Vhfield pretmp = sqrt(dx(phi)^2 + dy(phi)^2) * phi;
tmp = (pretmp > 0.04);

phasefield;
RhoField;
A0 = A0 + rhochanged;

// EOM

real phiArea=0.;
real rhoArea=0;

// cout << "rho differentiated: " << rhochanged << endl;
// cout << "tension: " << tension << endl;
// gradmag = sqrt( dx(phi)^2 + dy(phi)^2);
// maxmag = gradmag[].max;
// dropoff = exp(-50 * (1-((maxmag - gradmag)/ maxmag)) ) * phi;
// minphirho = phi - rho;
// testing = rhotension * dropoff *(abs(dx(rho)) + abs(dy(rho)));


macro GetArea()
phiArea = int2d(Th)(phi^2 * (3 - 2*phi));
rhoArea = int2d(Th)(phi * rho^2 * (3 - 2*phi));
// EOM

real multiplier=1;

real epsilon=0.0005;
real gammaphi=0.000;

real eta1 = 0.004;             // viscosity type1
real eta2 = 0.004;             // viscocity type2
real a = 0.5;               // Coefficient a
real k = 0.001;               // phase width coefficient k
real lmda = 5;               // concentration constraint
real A0 = 3.143;              // Target value for A
real epseps = -1e-9;
real gamma = 0.0;
real dt = 0.0005;

real aP = 5;               // Coefficient a
real kP = 0.005;               // phase width coefficient k
real A0P = 3.143;              // Target value for A
real diffrate = 10;//2.5;
real drrho = dR;


// adhesion to surface (negative means adhesion)
real gammas=10;

fespace Vhfield (Th,P2,periodic=[[a5,y],[a7,y]]);//,[1,x],[3,x]]);// periodic=[[2,y],[4,y],[1,x],[3,x]]);
Vhfield phi;
Vhfield v;
Vhfield phiold;
Vhfield phicopy;

Vhfield rho;
Vhfield rhoold;
Vhfield w;
Vhfield rhomesh;

Vhfield visc;
Vhfield dirac;

Vhfield tmp;

Vhfield RhoPhitoPlot;

real DropTh = 0.025;
// Initialise the drop
func initPhi = 0.5 * (1 - tanh((sqrt((x-dxc)^2 + (y-0.4-dyc)^2) - dR) / (sqrt(2) * DropTh)))
 + 0.5 * (1 - tanh((sqrt((x-dxc)^2 + (y-1.5-dyc)^2) - dR) / (sqrt(2) * DropTh)));


func initRho = 0.5 * (1 - tanh((sqrt((x-dxc)^2 + (y-1.5-dyc)^2) - dR) / (sqrt(2) * DropTh)));

// func initPhi = 0.5 * (1-tanh((abs(x - dxc) + abs(y - dyc) - dR) / sqrt(2) / DropTh));

// func visc = (1 - phi * rho) * eta1 + rho * eta2;

real rhotension= 0.01;


problem phasefield(phi, v, master=0, solver=sparsesolver) // , 
    = int2d(Th) (  v * (phi)/dt  )
    //+ int2d(Th) (1/visc * (v * a * phi - 3*v*a*phi*phiold + 2*v*a*phi*phiold^2))
    // + int2d(Th) (1/visc * (k * (dx(v) *dx(phi) + dy(v) * dy(phi))))
    + int2d(Th) (1/visc * (v * phi - 3*v*phi*phiold + 2*v*phi*phiold^2))
    + int2d(Th) (1/visc * (epsilon * (dx(v) *dx(phi) + dy(v) * dy(phi))))
    - int2d(Th) (tmp * (1/visc * ((epsilon-gammaphi) * v * (dx(phi) * dx(phiold) + dy(phi) *dx(phiold)) / (dx(phiold)^2 + dy(phiold)^2 + epseps))))
    // + int2d(Th) (1/visc * (gamma* (dx(v) * dx(phi) + dy(v) * dy(phi)) / (dx(phiold)^2 + dy(phiold)^2 + epseps)))
    + int2d(Th) (1/visc * ( v * (12 * lmda *(phiArea-A0)*phi*(1-phiold))))
    - int2d(Th) (  v * (phiold)/dt  )
    + int1d(Th,2,3,4)(1/visc*(gammas*phi*v))
    + on(1,5,7,phi=0);
    // + on(2, 3, 4, phi=0);
    // + on(3, phi=1);



// func initRho = 0.5 * (1 - tanh((sqrt((x-dxc)^2 + (y-2-dyc)^2) - drrho) / (sqrt(2) * DropTh)));


func rhochanged = int2d(Th) (dt * diffrate * phi * (dx(rho) + dy(rho)));
// func tension = int2d(Th) (rhotension * dropoff * (dx(w) *dx(rho) + dy(w) * dy(rho)));


problem RhoField(rho, w, master=0, solver=sparsesolver)
    = int2d(Th) (w * (rho)/dt )
    + int2d(Th) (1/visc * phi * (w * aP * rho - 3*w*aP*rho*rhoold + 2*w*aP*rho * rhoold^2))
    + int2d(Th) (1/visc * (kP * (dx(w) *dx(rho) + dy(w) * dy(rho))))
    + int2d(Th) (1/visc * ( w * (12 * lmda *(rhoArea-A0P)*rho*(1-rhoold))))
    // + int2d(Th) (1/visc * (rhotension * dropoff * (dx(w) *dx(rho) + dy(w) * dy(rho))))
    - int2d(Th) (dt * diffrate * phi *  (dx(w) *dx(rho) + dy(w) * dy(rho)))
    - int2d(Th) ( w * (rhoold)/dt  )
    + int1d(Th,2,3,4)(1/visc*(gammas*rho*w))
    + on(1,5,7,rho=0);



// Initialisation
phi = initPhi;
rho = initRho;
RhoPhi
// Initial mesh adaptation
getAdaptMesh
// Reinitialise the function, since it has a known value, adapt mesh again
phi = initPhi;
rho = initRho;
RhoPhi
getAdaptMesh
// Reinitialise the function, since it has a known value, adapt mesh again
phi = initPhi;
rho = initRho;
RhoPhi
getAdaptMesh
// Final initialisation of the function
phi = initPhi;
rho = initRho;
RhoPhi
cout << "CURRENT AREA: " << phiArea << endl;
phiold=phi;
rhoold=rho;

GetArea
A0 = phiArea;
A0P = rhoArea;
cout << "phi area is: " << A0 << endl;
cout << "rho area is: " << A0P << endl;
// Plot initial mesh and pf distribution
//plot(t,fill=1,value=1);
plot(Th, wait=true);
//plot(u,fill=1,value=1);
// plot(phi,fill=1,value=1);
// plot(fi,fill=1,value=1);


int nAdapt=0;
real curt=0.0;
// // Time stepping
real divChck, dxdtChck = 10.0, dxOld = 0.0, dxNew;
int  NstedChck = 0;
// continue simulation until CFL condition fails
int counter = 0;
while(true)//(maxCFL > 1e-4)
{
    cout << "starting..." << endl;
    // If needed, carry out mesh adaptation, solve again, adapt again
    if( nAdapt == dref)
    {
        // if (counter < 150)
        //     ElongateMesh(curt)
        cout << "    Mesh adpt 1, ";
        getAdaptMesh
        cout << endl;
        nAdapt++;
        // plot(Th, wait=true);
        nAdapt = 0;
        // plot(testing, wait=true, fill=1,value=1);
    }
    ++counter;

    // if (counter % 300 == 1)
    //     plot(Th, wait=true);
    // Solve the PF equations
    curt = curt+dt;
    cout << "ct = " << curt << ", ";

    GetArea
    solvePhase
    cout << "phi area: " << phiArea << "  with constraint: " << A0 << endl;
    cout << "rho area: " << rhoArea << "  with constraint: " << A0P << endl;
    // plot(phi,fill=1,value=1);    



    // Prepare for the next time step
    phiold = phi;
    rhoold = rho;
    dxOld = dxNew;
    nAdapt++;
    // plot(fi,fill=1,value=1);

    // Vhfield first = tmp * (dx(phi) + dy(phi)) / sqrt(dx(phi)^2 + dy(phi)^2 + epseps);
    // Vhfield second = tmp *  (dx(phi) + dy(phi)) / sqrt(dx(phi)^2 + dy(phi)^2 + epseps);
    // Vhfield checker =  tmp * (1/visc * (epsilon * ( dx(phi)*dx(phi) + dy(phi)*dy(phi)) / (dx(phiold)^2 + dy(phiold)^2 + epseps)));
    // if (counter % 10 == 0)
    //     plot(checker, wait=true, fill=1,value=1);

    RhoPhi
    
    plot(RhoPhitoPlot,fill=1,value=1, wait=false);

    

    // Vhfield check = phi * (1 - rho);
    // plot(check,fill=1,value=1, wait=false);
    // plot(rho,fill=1,value=1, wait=true);

    // plot(Th, wait=true);
    // plot(u,fill=1,value=1);
}
