load "gmsh";
load "iovtk";
load "UMFPACK64";
load "isoline";
load "Element_P3";

// time needs to increase since we made thinner boundary.
real endsim=201;
real endrelaxation=1; // n steps before swapping to phase field main
bool printScreen=true;
int screenStep = 5;
real equilibraterho=1; // use lower rho surface tension at the beginning of simulation

string parstr = "";
string dirstr = "";
if (ARGV.n > 3)
{
    parstr = "-" + ARGV[2] + "-" + ARGV[3] + "-" + ARGV[4];
    dirstr =  ARGV[2] + "-" + ARGV[3] + "-" + ARGV[4] + "/";
    printScreen = false;
}

verbosity=0;
int PrintStep=5000;
bool doPrint=true;
bool doTimespan=false;
int timePrint=100;
bool printinterface=false;
bool PrintEnergy=true;
string foldern = "images/" + dirstr + "phirho-images/";
string folderint1 = "images/" + dirstr + "interface1/";
string folderint2 = "images/" + dirstr + "interface2/";
string folderphi = "images/" + dirstr + "phi-images/";
string folderrho = "images/" + dirstr + "rho-images/";
// string folderrhotwo = "images/" + dirstr + "rhotwo-images/";
string commandstart = "mkdir images";
string command0 = "mkdir images/" + dirstr;
string command1 = "mkdir images/" + dirstr + "phirho-images";
string command2 = "mkdir images/" + dirstr + "interface1";
string command3 = "mkdir images/" + dirstr + "interface2";
string command4 = "mkdir images/" + dirstr + "phi-images";
string command5 = "mkdir images/" + dirstr + "rho-images";
// string command6 = "mkdir images/" + dirstr + "rhotwo-images";

bool makeData = true;

if (dirstr == "")
{
    dirstr = "data/";
}

string datafolder = "model-output/" + dirstr;
string datacommand1 = "mkdir model-output";
string datacommand2 = "mkdir model-output/" + dirstr;

if (makeData)
{
    system(datacommand1);
    system(datacommand2);
}


if (doPrint)
{
    system(commandstart);
    system(command0);
    if (printinterface)
    {
        system(command2);
        system(command3);
    }
    system(command1);
    system(command4);
    system(command5);
    // system(command6);
}
   

// -------------------------------------------------------------------------------------------------------------------------------------
// Mesh and grid

real xmin =  -2;
real xmax =  2;
real ymin =  0;
real ymax =  6;

// Mesh resolution
int  n     = 2; // Number of segments per unit length
real refI  = 16.0; // Refinement factor for the interface
real mGrw  = 1.6;  // Growth rate of the mesh elements
int  dref  = 10; // Number of time-steps between mesh adaption


mesh Th = square((xmax-xmin)*n,(ymax-ymin)*n,[xmin+(xmax-xmin)*x,ymin+(ymax-ymin)*y]);

// -------------------------------------------------------------------------------------------------------------------------------------
// Fields
fespace Vhfield (Th,P2,periodic=[[2,y],[4,y],[1,x],[3,x]]);
Vhfield phi;
Vhfield v;
Vhfield phiold;
Vhfield u;

Vhfield rho;
Vhfield rhoold;
Vhfield w;
Vhfield rhomesh;

Vhfield absdelphi;
Vhfield phiinterface;

Vhfield absdelrhotwo;
Vhfield rhotwointerface;

Vhfield rhophiinterface;
Vhfield rhooutside;

Vhfield RhoPhiPlot;
Vhfield curvature;
Vhfield boolRhoPhitoPlot;

Vhfield precurvatureX;
Vhfield precurvatureY;
Vhfield divprecurvature;

Vhfield beforegral;
Vhfield postgral;

Vhfield maxrho;
Vhfield rhominusphi;
Vhfield PreRhoCurve;
Vhfield RhoCurve;
Vhfield RhoOutline;

Vhfield RprecurvatureX;
Vhfield RprecurvatureY;
Vhfield Rdivprecurvature;
Vhfield Rcurvature;

Vhfield rhotwo;
Vhfield rhotwoold;
Vhfield wt;

// -------------------------------------------------------------------------------------------------------------------------------------
// Compilation of macros

// Mesh adaptation and destruction of the old mesh
macro getAdaptMesh()
Th = adaptmesh(Th,rhomesh,hmin=1.0/(n*refI),hmax=1.0/n,iso=true,ratio=mGrw,err=0.01,nbvx=4e4,periodic=[[2,y],[4,y],[1,x],[3,x]]);
v = 0;
w=0;
phi = phi;
// EOM

macro MakeRhoPhiMesh()
RhoPhiPlot = phi * (rho * 2 - 1) ;
rhomesh = RhoPhiPlot;
// EOM
// phi * (rho * 2 - 1) * (rhotwo * 2 - 1);

real phimoved=0;


// Macro for non-linear solutions
macro solvePhase()
{
    if (dynamicdiff)
    {
        rhooutside = (phi < 0.5) * (sqrt(dx(rho)^2 + dy(rho)^2));
        rhooutside = (rhooutside > 2);
        rhophiinterface = (phi > upperdifflimit) * (sqrt(dx(rho)^2 + dy(rho)^2)) * (rho < lowerdifflimit) * phi;
        real overlap = int2d(Th) (rhophiinterface );
        real funcoverlap = overlap / (overlap^2 + 0.02);
        diffparam = diffrate/dt * funcoverlap;
    }
    BalanceDifferentiation;

    {
        precurvatureX = dx(phi) / sqrt(dx(phi)^2 + dy(phi)^2 + epseps);
        precurvatureY = dy(phi) / sqrt(dx(phi)^2 + dy(phi)^2 + epseps);
        divprecurvature = dx(precurvatureX) + dy(precurvatureY);
        curvature = sqrt(dx(phi)^2 + dy(phi)^2) * divprecurvature;

        if (curt < endrelaxation)
        {
            RelaxRhoField;
            relaxphasefield;

        }
        else
        {
            beforegral = (rho^2 * (3 - 2*rho)) * ((phi^2 * (3 - 2*rho)) - 1);
            RhoField;
            postgral = (rho^2 * (3 - 2*rho)) * ((phi^2 * (3 - 2*rho)) - 1);

            phasefield;

            phimoved = fmax(int2d(Th)(beforegral-postgral),0);
        }


        if (phimoved < 0)
            phimoved = 0;
    }

    if (dynamicdiff) 
    {
        real loss = netrate * diffamount;
        rhoArea = rhoArea - loss;
        rhoArealb = rhoArealb - loss;

        
        real maxadd = addproportion * diffamount;
        if (phimoved > maxadd)
            phimoved = maxadd;
        A0 = A0 + phimoved;
    }
    else
    {
        real gain = absgrowth - diffamount;
        rhoArea = rhoArea + gain;
        rhoArealb = rhoArealb + gain;

        if (phimoved > absgrowth)
            phimoved = absgrowth;
        A0 = A0 + phimoved;
    }
    
}
// EOM

    // if (counter < endrelaxation)
    // {
    //     absdelphi = sqrt(dx(dummyphi)^2 + dy(dummyphi)^2);
    //     phiinterface = (absdelphi * dummyphi > 0.04);
    //     relaxphasefield;
    //     RhoField;
    // }
    // else 

macro BalanceDifferentiation()
{
    diffamount = RhoDifferentiate;
}
//EOM


real phiArea=0.;
real rhoArea=0.;
real rhoArealb=0.;

real rhophiArea=0.;
real rhononphiArea=0.;


macro GetArea()
    rhononphiArea = int2d(Th)((phi < 1)*(1-phi)*rho^2 * (3 - 2*rho));
    rhophiArea = int2d(Th)((phi < 1) * phi * (rho)^2 * (3 - 2*(rho)) + (phi>1) * (rho)^2 * (3 - 2*(rho)));
    phiArea = int2d(Th)(phi^2 * (3 - 2*phi));
// EOM
//- int2d(Th)((rho*phi)^2 * (3 - 2*(rho*phi)));

real gammaphi=0.;     // surface tension of phi

real eta = 1;             // viscosity type1
real eta2 = 1;             // viscocity type2
real a = 1;               // Coefficient a 
real eps = 0.0002;               // phase width coefficient k
real lmda = 10;               // concentration constraint
real lmdarho = 10;               // concentration constraint
real lmdarhophi = 10;               // concentration constraint
real A0 = 3.143;              // Target value for A
real epseps = 1e-9;           // small prefactor for 1/sqrt
real dt = 0.01;

real phitension=1;
real rhophitension=12;
real rhotension=1;
real rhotwotension=1; // rhotwo params
real rhotwophitension=0;


if (ARGV.n > 3)
{
    phitension = atof(ARGV[2]);
    rhophitension = atof(ARGV[3]);
    rhotension = atof(ARGV[4]);
    makeData=true;
}

// real aP = initaP;               // Coefficient a (increased need to be at 1 or 0, increase causes decreases interface length)
// real kP = initkP;               // smoothness of interface transition, decrease causes decrease in interface length
real A0P = 3.143;              // Target value for A
real A0RP = 0.;

// real initaP = 1; // for equilibration (equal to phi)
// real initkP = 0.0001; // for equilibration NOTE: MIGHT BE BETTER AT slightly lower value than phi for sharper interface
// real trueaP = initaP*rhophitension;  //initaP * 15;
// real truekP = initkP*rhophitension;// initkP * 15;

real apt=0;
real kpt=0;
real rhotwoArea=0;
real rhotwophiArea=0;
real A0RPtwo=0;
real A0Ptwo=0;

bool dynamicdiff = false;

// dynamic
real diffrate =0.;//1e-4;// 1e-4;//1e-4;//1e-4;
real addproportion = 0.; // between 0 and 1
real addrate=addproportion * diffrate;//0.25e-4;//0.5e-4;
real netrate=1;
if (addrate > 0)
    netrate=(diffrate-addrate)/diffrate;

// non dynamic
real diffparam = 0.02; // this is being treated dynamically if dynamic param is true.
real absgrowth = 0;

real diffamount=0;

real upperdifflimit=0.6;
real lowerdifflimit=0.4;



// adhesion to surface (negative means adhesion), currently depracated.
real gammas=10;
// adhesion between two cell types
real gammaSL=-0.03;



real relaxphi=2;
real relaxrhophi=10;
real relaxrho=8;




/* the below equation has the curvature term removed*/
problem phasefield(phi, v, master=0, solver=sparsesolver) // , 
    = int2d(Th) (  v * (phi)/dt  )
    + int2d(Th) (1/eta * phitension * a * (v* 0.5 * phi - v*1.5*phi*phiold + v*phi*phiold^2))
    + int2d(Th) (1/eta *  phitension  * (eps * (dx(v) *dx(phi) + dy(v) * dy(phi))))
    + int2d(Th) ( (1/eta * phitension * phiinterface * ((eps) * v * curvature )))
    + int2d(Th) (1/eta * ( v * (12. * lmda *(phiArea-A0)*phi*(1-phiold))))
    - int2d(Th) (  v * (phiold)/dt  )

    + int2d(Th) (1/eta * phi * rhophitension * a * (v * 0.5 * rho - 1.5*v*rho*rho + v*rho * rho^2))
    + int2d(Th) (1/eta * phi * rhophitension * (eps * (dx(rho) * dx(v) + dy(rho) * dy(v))))

    + int2d(Th) (1/eta * (phiold < 1) * (1) * rhotension * a * (v * 0.5 * rho - 1.5*v*rho*rho + v*rho * rho^2))
    + int2d(Th) (1/eta * (phiold < 1) * (-phi) * rhotension * a * (v * 0.5 * rho - 1.5*v*rho*rho + v*rho * rho^2))
    + int2d(Th) (1/eta * (phiold < 1) * (1) * rhotension * (eps * (dx(rho) * dx(v) + dy(rho) * dy(v))))
    + int2d(Th) (1/eta * (phiold < 1) * (-phi) *rhotension * (eps * (dx(rho) * dx(v) + dy(rho) * dy(v))))

    + int2d(Th) (1/eta * ( v * (12 * lmdarhophi *(rhophiArea-A0RP)*rho*phi*(1-rho))))
    + int2d(Th) (1/eta * ( v * (12 * lmdarho *(rhononphiArea-A0P)*(1)*rho*(1-rhoold))))
    + int2d(Th) (1/eta * ( v * (12 * (phiold < 1) * lmdarho *(rhononphiArea-A0P)*(-phi)*rho*(1-rhoold))));
    // + int2d(Th) (1/eta * ( v * (12 * lmdarho *(rhoArea-A0P)*rho*(1-rho))))
    // - int2d(Th) ((phiold > upperdifflimit) * (rho < lowerdifflimit) * phi * diffparam * v * sqrt(dx(rho)^2 + dy(rho)^2))
    
    // - int2d(Th) (1/eta * 100 * v * rho * (rhoold - phiold) * (phiold < rho));
    // + int2d(Th) (1/eta * phi * rhotwo * a * rhotwophitension * (0.5 * v - 1.5*v*rhotwoold + v*rhotwoold^2))
    // + int2d(Th) (1/eta * phi * rhotwophitension * (k * (dx(v) *dx(rhotwo) + dy(v) * dy(rhotwo))))
    // + int2d(Th) (1/eta * ( v * (12 * lmda *(rhotwophiArea-A0RPtwo)*rhotwo*phi*(1-rhotwoold))));


func RhoDifferentiate = int2d(Th) (dt * (phi > upperdifflimit) * (rho < lowerdifflimit) * diffparam * phi * sqrt(dx(rho)^2 + dy(rho)^2));



problem RhoField(rho, w, master=0, solver=sparsesolver)
    = int2d(Th) (w * (rho)/dt )
    + int2d(Th) (1/eta * (1-phi) * (phi < 1) * rhotension * rho * (0.5 * w * a - 1.5*w*a*rhoold + w*a*rhoold^2))
    + int2d(Th) (1/eta * (1-phi) *  (phi < 1) * rhotension * (eps * (dx(w) *dx(rho) + dy(w) * dy(rho))))
    + int2d(Th) (1/eta * ( w * (phi < 1) * (12 *  lmdarho *(rhononphiArea-A0P)*(1-phi)*rho*(1-rhoold))))
    + int2d(Th) (1/eta * (phi)* rho *  rhophitension * (0.5 * w * a - 1.5*w*a*rhoold + w*a*rhoold^2))
    + int2d(Th) (1/eta * (phi) * rhophitension * (eps * (dx(w) *dx(rho) + dy(w) * dy(rho))))    
    // + int2d(Th) (1/eta * (phi-rhoold) * (phi > rhoold) * rho *  rhophitension * (0.5 * w * a - 1.5*w*a*rhoold + w*a*rhoold^2))
    // + int2d(Th) (1/eta * (phi-rhoold) * (phi > rhoold) * rhophitension * (eps * (dx(w) *dx(rho) + dy(w) * dy(rho))))    
    + int2d(Th) (1/eta * ( w * (12 * lmdarhophi *(rhophiArea-A0RP)*rho*phi*(1-rhoold))))
    // + int2d(Th) (1/eta * ( w * (12 * lmdarhophi *rho*(1-rhoold)*(rhoold > phi))))
    // + int2d(Th) ( (1/eta * rhointerface * ((k) * w * Rcurvature)))
    // in strong form (slightly in correc)
    // + int2d(Th) (rhointerface * diffparam * w ) // slightly incorrect ues of diffparam as constant,
    // in weak form . Trying without a phi in here
    + int2d(Th) ((phi > upperdifflimit) * (rhoold < lowerdifflimit) * diffparam * w * phi * sqrt(dx(rhoold)^2 + dy(rhoold)^2))
    - int2d(Th) ( w * (rhoold)/dt  );


problem relaxphasefield(phi, v, master=0, solver=sparsesolver) // , 
    = int2d(Th) (  v * (phi)/dt  )
    + int2d(Th) (1/eta * relaxphi * a * (v* 0.5 * phi - v*1.5*phi*phiold + v*phi*phiold^2))
    + int2d(Th) (1/eta *  relaxphi  * (eps * (dx(v) *dx(phi) + dy(v) * dy(phi))))
    + int2d(Th) ( (1/eta * relaxphi * phiinterface * ((eps) * v * curvature )))
    + int2d(Th) (1/eta * ( v * (12. * lmda *(phiArea-A0)*phi*(1-phiold))))
    - int2d(Th) (  v * (phiold)/dt  )
    + int2d(Th) (1/eta * phi * relaxrhophi * a * (v * 0.5 * rho - 1.5*v*rho*rho + v*rho * rho^2))
    + int2d(Th) (1/eta * phi * relaxrhophi * (eps * (dx(rho) * dx(v) + dy(rho) * dy(v))))
    + int2d(Th) (1/eta * (phiold < 1) * (1) * relaxrho * a * (v * 0.5 * rho - 1.5*v*rho*rho + v*rho * rho^2))
    + int2d(Th) (1/eta * (phiold < 1) * (-phi) * relaxrho * a * (v * 0.5 * rho - 1.5*v*rho*rho + v*rho * rho^2))
    + int2d(Th) (1/eta * (phiold < 1) * (1) * relaxrho * (eps * (dx(rho) * dx(v) + dy(rho) * dy(v))))
    + int2d(Th) (1/eta * (phiold < 1) * (-phi) *relaxrho * (eps * (dx(rho) * dx(v) + dy(rho) * dy(v))))
    + int2d(Th) (1/eta * ( v * (12 * lmdarhophi *(rhophiArea-A0RP)*rho*phi*(1-rho))))
    + int2d(Th) (1/eta * ( v * (12 * lmdarho *(rhononphiArea-A0P)*(1)*rho*(1-rhoold))))
    + int2d(Th) (1/eta * ( v * (12 * (phiold < 1) * lmdarho *(rhononphiArea-A0P)*(-phi)*rho*(1-rhoold))));


problem RelaxRhoField(rho, w, master=0, solver=sparsesolver)
    = int2d(Th) (w * (rho)/dt )
    + int2d(Th) (1/eta * (1-phi) * (phi < 1) * relaxrho * rho * (0.5 * w * a - 1.5*w*a*rhoold + w*a*rhoold^2))
    + int2d(Th) (1/eta * (1-phi) *  (phi < 1) * relaxrho * (eps * (dx(w) *dx(rho) + dy(w) * dy(rho))))
    + int2d(Th) (1/eta * ( w * (phi < 1) * (12 *  lmdarho *(rhononphiArea-A0P)*(1-phi)*rho*(1-rhoold))))
    + int2d(Th) (1/eta * (phi)* rho *  relaxrhophi * (0.5 * w * a - 1.5*w*a*rhoold + w*a*rhoold^2))
    + int2d(Th) (1/eta * (phi) * relaxrhophi * (eps * (dx(w) *dx(rho) + dy(w) * dy(rho))))    
    + int2d(Th) (1/eta * ( w * (12 * lmdarhophi *(rhophiArea-A0RP)*rho*phi*(1-rhoold))))
    - int2d(Th) ( w * (rhoold)/dt  );



Vhfield dummyphi;
Vhfield dummyphiold;
Vhfield dummyv;
real dtau = dt;

problem DummyPhaseField(dummyphi, dummyv, master=0, solver=sparsesolver) // , 
    = int2d(Th) (  dummyv * (dummyphi)/dtau  )
    + int2d(Th) (1/eta * (0.5 * dummyv * dummyphi - 1.5*dummyv*dummyphi*dummyphiold + dummyv*dummyphi*phiold^2))
    + int2d(Th) (1/eta * (eps * (dx(dummyv) *dx(dummyphi) + dy(dummyv) * dy(dummyphi))))
    + int2d(Th) (1/eta * ( dummyv * (12 * lmda *(phiArea-A0)*dummyphi*(1-dummyphiold))))
    - int2d(Th) (  dummyv * (dummyphiold)/dtau  );


Vhfield dummyrho;
Vhfield dummyrhoold;
Vhfield dummyw;

// problem DummyRhoField(dummyrho, dummyw, master=0, solver=sparsesolver) // , 
//     = int2d(Th) (  dummyw * (dummyrho)/dtau  )
//     + int2d(Th) (1/eta * a * (0.5 * dummyw * dummyrho - 1.5*dummyw*dummyrho*dummyrhoold + dummyw*dummyrho*phiold^2))
//     + int2d(Th) (1/eta * (eps * (dx(dummyw) *dx(dummyrho) + dy(dummyw) * dy(dummyrho))))
//     + int2d(Th) (1/eta * ( dummyw * (12 * lmda *(rhoArea-A0P)*dummyrho*(1-dummyrhoold))))
//     - int2d(Th) (  dummyw * (dummyrhoold)/dtau  );

Vhfield drhotwo;
Vhfield drhotwoold;
Vhfield dwt;

problem DRhoTwoField(drhotwo, dwt, master=0, solver=sparsesolver) // , 
    = int2d(Th) (  dwt * (drhotwo)/dtau  )
    + int2d(Th) (1/eta * a * drhotwo * (0.5 * dwt - 1.5*dwt*drhotwoold + dwt*drhotwoold^2))
    + int2d(Th) (1/eta * (eps * (dx(dwt) *dx(drhotwo) + dy(dwt) * dy(drhotwo))))
    + int2d(Th) (1/eta * ( dwt * (12 * lmda *(rhotwoArea-A0Ptwo)*drhotwo*(1-drhotwoold))))
    - int2d(Th) (  dwt * (drhotwoold)/dtau  );


// currently do not know if curvature removal energy is correct?? Can I just integrate??
// func TotalEnergy = int2d(Th)((a*phitension)*0.25 * phi^2 * (1-phi)^2 + (phitension * eps) * 0.5 * abs(dx(phi) + dy(phi))^2)
//                     + lmda * (phiArea-A0)^2
//                     + int2d(Th)(phi * rhophitension * ((a)*0.25 * rho^2 * (1-rho)^2 + (eps) * 0.5 * abs(dx(rho) + dy(rho))^2))
//                     + lmdarho * (rhoArea - A0P)^2
//                     + lmdarhophi * (rhophiArea - A0RP)^2
//                     - int2d(Th) ( (phitension * phiinterface * ((eps) * curvature)));


// Initialisation
// Initial parameters of the drop
real dR = 0.6;  // Radius
real dRrho = 0.4;  // Radius
real dxc= 0.0;  // x coordinate
real dyc= 0.8;  // y coordinate, 0.2 is start above gorund
real DropTh = sqrt((2*eps)/a);
real rhoDropTh = sqrt((2*eps)/a);
real dyct = 1.6; // dR + dyc will give same top point (half in half out)

// "Half lengths" in each direction for a 2:1 aspect ratio
real Lx = 3.0 * dR;  // x half-extent
real Ly = 1.0 * dR;  // y half-extent

func initPhi = 0.5 * (1.0- tanh(( max(abs((x - dxc) / Lx), abs((y - dyc) / Ly)) - 1.0 )/ DropTh)) //0.5 * (1-tanh((abs(y - dyc) - dR) / DropTh))// 0.5 * (1 - tanh((sqrt((x-dxc)^2 + (y-0.4-dyc)^2) - dR) / (sqrt(2) * DropTh)))
 + 0.5 * (1 - tanh((sqrt((x-dxc)^2 + (y-dyct)^2) - dRrho) / (sqrt(2) * rhoDropTh)));
func initRho = 0.5 * (1 - tanh((sqrt((x-dxc)^2 + (y-dyct)^2) - dRrho) / (sqrt(2) * rhoDropTh)));

func initRhoTwo =  0;

// real sxmin=-0.6;
// real sxmax=0.6;
// real symin=1.3;
// real symax=1.9;

// func initPhi = 0.5 * (1-tanh((abs(y - dyc + 0.5) - dR) / DropTh))
//     //+ (y >= dyct) * 0.5 * (1 - tanh((sqrt((x - dxc)^2 + (y - dyct)^2) - dR) / (sqrt(2) * DropTh)));
//      + 0.25 * (tanh((x - sxmax)/DropTh) - tanh((x - sxmin)/DropTh)) * (tanh((y - symax)/DropTh) - tanh((y - symin)/DropTh));
// // func initRho = (y >= dyct) * 0.5 * (1 - tanh((sqrt((x - dxc)^2 + (y - dyct)^2) - dR) / (sqrt(2) * DropTh)));
// func initRho = 0.25 * (tanh((x - sxmax)/DropTh) - tanh((x - sxmin)/DropTh)) * (tanh((y - symax)/DropTh) - tanh((y - symin)/DropTh));

 
// func initPhi = 0.5 * (tanh((x - 0)/DropTh) - tanh((x - 1)/DropTh)); 
// func initRho = 0.5 * (tanh((x - 0)/DropTh) - tanh((x - 1)/DropTh)) ;
// cout << initRho << endl;


phi = initPhi;
rho = initRho;
rhotwo = initRhoTwo;

MakeRhoPhiMesh
// Initial mesh adaptation
getAdaptMesh
// Reinitialise the function, since it has a known value, adapt mesh again
phi = initPhi;
rho = initRho;
rhotwo = initRhoTwo;

MakeRhoPhiMesh
getAdaptMesh
// Reinitialise the function, since it has a known value, adapt mesh again
phi = initPhi;
rho = initRho;
rhotwo = initRhoTwo;

MakeRhoPhiMesh
getAdaptMesh
// Final initialisation of the function
phi = initPhi;
rho = initRho;
rhotwo = initRhoTwo;
rhotwo =  rhotwo - (rho > 0.01) * rhotwo * rho^(1./4.);

MakeRhoPhiMesh
cout << "CURRENT AREA: " << phiArea << endl;
phi = fmin(phi,1);
phiold=phi;
rhoold=rho;
rhotwoold=rhotwo;
real overlapcheck = int2d(Th)((phi>1.001) * phi);
GetArea
A0 = phiArea-overlapcheck;
A0P = rhononphiArea;
A0RP = rhophiArea;
A0RPtwo = rhotwophiArea;
A0Ptwo = rhotwoArea;

rhoArea = int2d(Th)(rho^2 * (3 - 2*rho));
rhoArealb = int2d(Th)((phi < rho) * phi * rho^2 * (3-2*rho) + (phi > rho) * rho^3 * (3 - 2*rho));


cout << "phi area is: " << A0 << endl;
cout << "rho area is: " << A0P << endl;


// plot(Th, wait=true);


int nAdapt=0;
real curt=0.0;
// // Time stepping
int counter = 0;
bool recorded;
bool relaxended = false;
while(curt < endsim)//(maxCFL > 1e-4)
{
    // If needed, carry out mesh adaptation, solve again, adapt again
    if( nAdapt == dref)
    {
        // if (counter < 150)
        //     ElongateMesh(curt)
        cout << "    Mesh adpt 1, ";
        getAdaptMesh
        cout << endl;
        nAdapt++;
        // plot(Th, wait=true);
        nAdapt = 0;
    }
    ++counter;

    // solve equations
    curt = curt+dt;
    solvePhase

    GetArea
    // probably need to change this upper bound to account for height differences?
    real ub1 = int2d(Th)(rho^2 * (3 - 2*rho));
    real lb1 = int2d(Th)((phi < rho) * phi * rho^2 * (3-2*rho) + (phi > rho) * rho^3 * (3 - 2*rho));
    real aratio1;
    if (ub1 > 0 && lb1 > 0)
        aratio1 =(rhophiArea-lb1) / (ub1 - lb1);
    else
        aratio1 = 0;
    real ub2 = int2d(Th)(rho^2 * (1 - rho) * (3 - 2*rho));
    real lb2 = 0;
    real aratio2=1-aratio1;//(rhononphiArea-lb2) / (ub2 - lb2);


    if (counter % 10 == 0)
    {
        cout << "Area aratio 1: " << aratio1 << endl;
        cout << "Area aratio 2: " << aratio2 << endl;
        cout << "ct = " << curt << ", ";
        cout << "phi area: " << phiArea << "  with constraint: " << A0 << endl;
        cout << "rho nonphi area: " << rhononphiArea << "  with constraint: " << A0P << endl;
        cout << "rhophi area: " << rhophiArea << " with constraint: " << A0RP << endl;
        // cout << "Value of addition param: " << addrate << endl;
    }

    // Prepare for the next time step
    rhoold = rho;
    phiold = phi;
    // rhotwoold = rhotwo;
    nAdapt++;

    if (curt < endrelaxation)
    {
        GetArea
        A0 = phiArea;
        rhoArea = int2d(Th)(rho^2 * (3 - 2*rho));
        rhoArealb = int2d(Th)((phi < rho) * phi * rho^2 * (3-2*rho) + (phi > rho) * rho^3 * (3 - 2*rho));
    }

    if (curt > endrelaxation && relaxended == false)
    {
        relaxended = true;
        GetArea
        A0 = phiArea;
        rhoArea = int2d(Th)(rho^2 * (3 - 2*rho));
        rhoArealb = int2d(Th)((phi < rho) * phi * rho^2 * (3-2*rho) + (phi > rho) * rho^3 * (3 - 2*rho));
    }
    real diff = rhoArea - rhoArealb;

    if (aratio1 < 0)
    {
        aratio1 = 0;
        aratio2 = 1;
    }
    if (aratio1 > 1)
    {
        aratio1 = 1;
        aratio2 = 0;
    }

    A0RP = rhoArealb + diff * aratio1;
    A0P = diff * aratio2;

    // if (curt < 100)
    // {
    //     // rho^2 * (3 - 2*rho) HAS TO BE A CONSTANT. THE OTHER TWO MUST SUM TO THIS CONSTANT. How to deal with case phi > 1 I don't know. 
    //     GetArea;
    //     A0RP = (ub1-lb1)*aratio1 + lb1;
    //     A0P = (ub2-lb2)*aratio2 + lb2;

    //     if (A0RP < lb1)
    //     {
    //         cout << "hit lower bound" << endl;
    //         A0RP = lb1;
    //     }
    //     if (A0RP > ub1)
    //     {
    //         cout << "hit upper bound" << endl;
    //         A0RP = ub1;
    //     }
    //     if (A0P < lb2)
    //     {
    //         cout << "hit lower bound" << endl;
    //         A0P = lb2;
    //     }
    //     if (A0P > ub2)
    //     {
    //         cout << "hit upper bound" << endl;
    //         A0P = ub2;
    //     }
    // }

    if (counter % 8 == 0)
    {
        dummyphi = phi;
        dummyphiold = dummyphi;
        // drhotwo = rhotwo;
        // drhotwoold = rhotwoold;
        // dummyv = v;
        for (int d = 0; d < 4; ++d)
        {
            DummyPhaseField;
            dummyphiold = dummyphi;     

            // DRhoTwoField;
            // drhotwoold = drhotwo;  
            
        }

        absdelphi = sqrt(dx(dummyphi)^2 + dy(dummyphi)^2);
        phiinterface = (absdelphi > 1);

        // absdelrhotwo = sqrt(dx(drhotwo)^2 + dy(drhotwo)^2);
        // rhotwointerface = (absdelrhotwo > 1);

    }


    boolRhoPhitoPlot = (RhoPhiPlot < -0.05)*RhoPhiPlot + (RhoPhiPlot > 0.05)*RhoPhiPlot;

    MakeRhoPhiMesh

    // RhoPhiPlot = rho^2 * phi^2 * (1-phi)^2;
    if (rhophiArea < 0.01)
    {
        counter = PrintStep;
    }

    if (counter % screenStep == 0 && printScreen)
    {
        plot(RhoPhiPlot,fill=1,value=1, wait=false);
    }

    if (counter % PrintStep == 0 && doPrint)
    {
        string outputn = foldern + "image-" + curt + ".eps";
        plot(boolRhoPhitoPlot, ps=outputn, fill=1, wait=false);
        outputn = folderphi + "image-" + curt + ".eps";
        plot(phi, ps=outputn, fill=1, wait=false, value=true);
        outputn = folderrho + "image-" + curt + ".eps";
        plot(rho, ps=outputn, fill=1, wait=false, value=true);
        // outputn = folderrhotwo + "image-" + curt + ".eps";
        // plot(rhotwo, ps=outputn, fill=1, wait=false, value=true);
        

    }
    
    if (counter % 200 == 0 && printinterface)
    {
        string outputn2 = folderint1 + "image-" + curt + ".eps";
        string outputn3 = folderint2 + "image-" + curt + ".eps";
        plot(rhophiinterface, ps=outputn2, fill=1, wait=false);
        plot(rhooutside, ps=outputn3, fill=1, wait=false);
    }

    if (rhophiArea < 0.01)
    {
        curt = endsim;
    }


    if (makeData && curt > endsim-0.1 && recorded == false)
    {
        recorded = true;
        // matrix Vphi;
        // matrix Vrho;
        // matrix Vdiff;
        // Vphi.resize(maxcount, Vhfield.ndof);
        // Vrho.resize(maxcount, Vhfield.ndof);
        // Vdiff.resize(maxcount, Vhfield.ndof);
        string filen = datafolder + "phi_data" + parstr + ".dat";
        ofstream TheFile(filen);
        Vhfield xx=x;
        Vhfield yy=y;
        for(int i=0; i< Vhfield.ndof; ++i)
        {
            TheFile << xx[][i] << "\t" << yy[][i] << "\t" << phi[][i] << endl;
        }

        filen = datafolder + "rho_data" + parstr + ".dat";
        ofstream TheFilerho(filen);
        for(int i=0; i< Vhfield.ndof; ++i)
        {
            TheFilerho << xx[][i] << "\t" << yy[][i] << "\t" << rho[][i] << endl;
        }

        Vhfield diffregion = ((phi > 0.8) * (rhoold < 0.7) * diffparam * sqrt(dx(rho)+dy(rho)^2));
        filen = datafolder + "diff_data" + parstr + ".dat";
        ofstream TheFileDiff(filen);
        for(int i=0; i< Vhfield.ndof; ++i)
        {
            TheFileDiff << xx[][i] << "\t" << yy[][i] << "\t" << diffregion[][i] << endl;
        }
    }
    if (doTimespan && counter % timePrint == 0)
    {
        string filen = datafolder + "phi_data-" + curt + ".dat";
        ofstream TheFile(filen);
        Vhfield xx=x;
        Vhfield yy=y;
        for(int i=0; i< Vhfield.ndof; ++i)
        {
            TheFile << xx[][i] << "\t" << yy[][i] << "\t" << phi[][i] << endl;
        }

        filen = datafolder + "rho_data-" + curt + ".dat";
        ofstream TheFilerho(filen);
        for(int i=0; i< Vhfield.ndof; ++i)
        {
            TheFilerho << xx[][i] << "\t" << yy[][i] << "\t" << rho[][i] << endl;
        }

        Vhfield diffregion = ((phi > 0.8) * (rhoold < 0.7) * diffparam * sqrt(dx(rho)+dy(rho)^2));
        filen = datafolder + "diff_data-" + curt + ".dat";
        ofstream TheFileDiff(filen);
        for(int i=0; i< Vhfield.ndof; ++i)
        {
            TheFileDiff << xx[][i] << "\t" << yy[][i] << "\t" << diffregion[][i] << endl;
        }
    }



    if (PrintEnergy && counter % 10 == 0)
    {
        real t1 = int2d(Th)((a*phitension) * 0.25 * phi^2 * (1-phi)^2);
        real t2 = int2d(Th)((phitension * eps) * 0.5 * abs(dx(phi) + dy(phi))^2);
        real t3 = lmda * (phiArea-A0)^2;
        real t4 = int2d(Th) ( (phitension * phiinterface * ((eps) * curvature)));

        real t5 = int2d(Th)((rhotension * (1-phi) * (a)*0.25 * rho^2 * (1-rho)^2));
        real t6 = int2d(Th)((rhotension * (1-phi) * (eps) * 0.5 * abs(dx(rho) + dy(rho))^2));
        real t7 = lmdarho * (rhononphiArea - A0P)^2;
        // currently not removing curvature from rho.
        // real t8 = int2d(Th) ( (rhotwointerface * ((eps) * Rcurvature)));

        // coupling
        real t9 = int2d(Th)(phi * rhophitension * ((a)*0.25 * rho^2 * (1-rho)^2));
        real t10 = int2d(Th)(phi * rhophitension * ((eps) * 0.5 * abs(dx(rho) + dy(rho))^2));
        real t11 = lmdarhophi * (rhophiArea - A0RP)^2;
        real teng = t1+t2+t3-t4+t5+t6+t7+t9+t10+t11;

        if (counter == 10)
        {
            string filen = datafolder + "total_energy" + parstr + ".dat";
            ofstream TheFileEn(filen);
            TheFileEn << curt << "\t" << t1 << "\t" << t2 << "\t" << t3 << "\t" << t4 << "\t" << t5 << "\t" << t6 << "\t" << 
                        t7 << "\t" << t9 << "\t" << t10 << "\t" << t11 << "\t" << teng << endl;
        }
        else
        {
            string filen = datafolder + "total_energy" + parstr + ".dat";
            ofstream TheFileEn(filen, append);
            TheFileEn << curt << "\t" << t1 << "\t" << t2 << "\t" << t3 << "\t" << t4 << "\t" << t5 << "\t" << t6 << "\t" << 
                        t7 << "\t" << t9 << "\t" << t10 << "\t" << t11 << "\t" << teng << endl;
        }
       
    }
}

