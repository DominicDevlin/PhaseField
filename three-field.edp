load "gmsh";
load "iovtk";
load "UMFPACK64";
load "isoline";
load "Element_P3";

real endsim=1501;
real endrelaxation=0.2; // area relaxation
real endequilibrate=10; // no differentiation
bool printScreen=true;
int screenStep = 5;
bool doPrint=true;

bool RemoveCurvature = false;

string parstr = "";
string dirstr = "";
if (ARGV.n > 3)
{
    parstr = "-" + ARGV[2] + "-" + ARGV[3] + "-" + ARGV[4];
    dirstr =  ARGV[2] + "-" + ARGV[3] + "-" + ARGV[4] + "/";
    printScreen = false;
    doPrint=false;
}

verbosity=0;
int PrintStep=200;

bool doTimespan=true;
int DataOutputStep=4000;
bool printinterface=false;
bool PrintEnergy=false;
string folder1 = "images/" + dirstr + "composite/";
string folder2 = "images/" + dirstr + "c1/";
string folder3 = "images/" + dirstr + "c2/";

// string folderrhotwo = "images/" + dirstr + "rhotwo-images/";
string commandstart = "mkdir images";
string command0 = "mkdir images/" + dirstr;
string command1 = "mkdir images/" + dirstr + "composite";
string command2 = "mkdir images/" + dirstr + "c1";
string command3 = "mkdir images/" + dirstr + "c2";
// string command6 = "mkdir images/" + dirstr + "rhotwo-images";

bool makeData = true;

if (dirstr == "")
{
    dirstr = "data/";
}

string datafolder = "model-output/" + dirstr;
string datacommand1 = "mkdir model-output";
string datacommand2 = "mkdir model-output/" + dirstr;

if (makeData)
{
    system(datacommand1);
    system(datacommand2);
}

if (doPrint)
{
    system(commandstart);
    system(command0);
    system(command1);
    system(command2);
    system(command3);
}
   

// -------------------------------------------------------------------------------------------------------------------------------------
// Mesh and grid

real xmin =  -2;
real xmax =  2;
real ymin =  0;
real ymax =  6;

// Mesh resolution
int  n     = 1; // Number of segments per unit length
real refI  = 44; // Refinement factor for the interface
real mGrw  = 1.4;  // Growth rate of the mesh elements
int  dref  = 16; // Number of time-steps between mesh adaption

mesh Th = square((xmax-xmin)*n,(ymax-ymin)*n,[xmin+(xmax-xmin)*x,ymin+(ymax-ymin)*y]);

// -------------------------------------------------------------------------------------------------------------------------------------
// Fields
fespace Vhfield (Th,P2,periodic=[[2,y],[4,y],[1,x],[3,x]]);
// -------------------------------------------------------------------------------------------------------------------------------------




Vhfield c1;
Vhfield c2;
Vhfield c3;
Vhfield c1old;
Vhfield c2old;
Vhfield v;
Vhfield w;

Vhfield c12;
Vhfield c13;
Vhfield c23;

Vhfield dummyc1old;
Vhfield absdelc1;
Vhfield c1interface;
Vhfield dummyv;
Vhfield dummyc1;

Vhfield c12curvature;
Vhfield c12precurvatureX;
Vhfield c12precurvatureY;
Vhfield c12divprecurvature;

Vhfield c13curvature;
Vhfield c13precurvatureX;
Vhfield c13precurvatureY;
Vhfield c13divprecurvature;

Vhfield c23curvature;
Vhfield c23precurvatureX;
Vhfield c23precurvatureY;
Vhfield c23divprecurvature;



real dt = 0.005;
real sig12=24;
real sig13=6;
real sig23=4;
real sig123 = 2000;

real eps = 0.02;

if (ARGV.n > 3)
{
    sig12 = atof(ARGV[2]);
    sig13 = atof(ARGV[3]);
    sig23 = atof(ARGV[4]);
    eps = atof(ARGV[5]);
    
}

real epssq = eps^2;
cout << "epssq: " << epssq << "  sig12: " << sig12 << "  sig13: " << sig13 << "  sig23: " << sig23 << endl;
real k1 = sig12 + sig13 - sig23;
real k2 = sig12 + sig23 - sig13;
real k3 = sig13 + sig23 - sig12;
real eta=1;
real eta2=eta;
real etasolid = 100;
real lmda = 120;
// real bigdelta = abs(max(k1,k2,k3))*30;
// cout << "big delta is: " << bigdelta << endl;
real epseps = 1e-9;
real Drate = 0;
real endDrate = 1;


real c1Area = 0;
real c2Area = 0;
real c3Area = 0;

real A0c1 = 1;
real A0c2 = 1;
real A0c3 = 1;

// Is this the correct way to do this?? I'm not sure.
real TotalArea = (ymax-ymin) * (xmax-xmin);

macro GetArea()

    c1Area = int2d(Th)(c1^2 * (3 - 2*c1));
    c2Area = int2d(Th)(c2^2 * (3 - 2*c2));

    A0c1 = A0c1 + DiffAmount;
    A0c2 = A0c2 - DiffAmount;

    c3Area =  TotalArea - c1Area - c2Area

// EOM

func phaseoneintegral = int2d(Th)( 1/eta * (
    2*sig12*c1*c2^2
    +  2*sig13*( -3*c1*c1old + 2*c1*c1old^2 + 3*c1*c1old*c2 + c1 - 2*c1*c2 + c1*c2^2 )
    + (2)*sig23*( c1*c2^2 )
    + (-2)*sig23*(c2^2 - c2^3)
    + sig123 * c1 * (4*c1old^2*c2^2 + 2*c2^4 + 6*c1old*c2^3 - 6*c1old*c2^2 - 4*c2^3 + 2*c2^2)
    //abs(grad(ca-cb))^2
    +  (epssq/2) * (2*sig12 + 8*sig13 + 2*sig23) * (dxx(c1) + dyy(c1))
    + (epssq/2) * (-2*sig12 + 4*sig13 + 4*sig23) * (dxx(c2) + dyy(c2))
));

func phasetwointegral = int2d(Th)( 1/eta * (
    2*sig12*c2*c1^2 + 
    2*sig23*( -3*c2*c2old + 2*c2*c2old^2 + 3*c2*c2old*c1 + c2 - 2*c2*c1 + c2*c1^2 ) +
    (2)*sig13*( c2*c1^2 ) +
    (-2)*sig13*(c1^2 - c1^3) +
    sig123 * c2 * (4*c2old^2*c1^2 + 2*c1^4 + 6*c2old*c1^3 - 6*c2old*c1^2 - 4*c1^3 + 2*c1^2) +
    (epssq/2) * (2*sig12 + 8*sig23 + 2*sig13) * (dxx(c2) + dyy(c2)) +
    (epssq/2) * (-2*sig12 + 4*sig23 + 4*sig13) * (dxx(c1) + dyy(c1))
)) ;

real g2phase1 = 0;
real g2phase2 = 0; 
func DiffAmount = int2d(Th) (dt * Drate * c1^2 * c2^2);

real S = sig12 + sig13 + sig23;

problem SolveOne(c1, v, master=0, solver=sparsesolver)
    =int2d(Th)(v * (c1)/dt)

    + int2d(Th)(1/eta * v * 2*sig12*c1old*c2^2)
    + int2d(Th)(1/eta * v * 2*sig13*( -3*c1old*c1old + 2*c1old*c1old^2 + 3*c1old*c1old*c2 + c1old - 2*c1old*c2 + c1old*c2^2 ) )
    + int2d(Th)(1/eta * v *(2)*sig23*( c1old*c2^2 ))
    + int2d(Th)(1/eta * v *(-2)*sig23*(c2^2 - c2^3))
    + int2d(Th)(1/eta * v*sig123 * c1old * (4*c1old^2*c2^2 + 2*c2^4 + 6*c1old*c2^3 - 6*c1old*c2^2 - 4*c2^3 + 2*c2^2))


    + int2d(Th)(1/eta * (epssq/2) * v * (2) * S * c1 * dx(c2)^2)
    + int2d(Th)(1/eta * (epssq/2) * v * (2) * S * c1 * dy(c2)^2 )

    + int2d(Th)(1/eta * (epssq/2) * v * (-2) * S * c2 * (dx(c2)*dx(c1) + dy(c2)*dy(c1)) )

    + int2d(Th)(1/eta * (epssq/2) * v * (2) * sig13 * (dx(c2)*dx(c1) + dy(c2)*dy(c1)))

    + int2d(Th)(1/eta * (epssq/2) * v * (-2) * sig23 * dy(c2)^2)
    + int2d(Th)(1/eta * (epssq/2) * v * (-2) * sig23 * dx(c2)^2)

    + int2d(Th)(1/eta * (epssq/2) * (2*sig13 - 4*sig13*c2 + 2*S*c2^2) * (dx(c1)*dx(v) + dy(c1)*dy(v)))

    + int2d(Th)(1/eta * (epssq/2) * 2*sig13*c1 * (dx(c2) * dx(v) + dy(c2) * dy(v)))

    + int2d(Th)(1/eta * (epssq/2) * (-2*S*c1*c2 * (dx(c2)*dx(v) + dy(c2)*dy(v))))

    + int2d(Th)(1/eta * (epssq/2) * (2*sig23*c2 * (dx(c2)*dx(v) + dy(c2)*dy(v))))



    + int2d(Th)(1/eta * ( v * lmda *(c1Area-A0c1)*c1*(1-c1old)))


    - int2d(Th)( v * Drate * c1*c1old * c2^2)

    - int2d(Th)(v * c1old/dt);



problem SolveTwo(c2, w, master=0, solver=sparsesolver)
    =int2d(Th)(w * (c2)/dt)

    // func. derivative of traditional double well: sig12*c1^2 * c2^2 + sig13*c1^2 * c3^2 + sig23*c2^2 * c3^2
    + int2d(Th)(1/eta2 * w * 2*sig12*c2old*c1^2)
    + int2d(Th)(1/eta2 * w * 2*sig23*( -3*c2old*c2old + 2*c2old*c2old^2 + 3*c2old*c2old*c1 + c2old - 2*c2old*c1 + c2old*c1^2 ) )
    + int2d(Th)(1/eta2 * w *(2)*sig13*( c2old*c1^2 ))
    + int2d(Th)(1/eta2 * w *(-2)*sig13*(c1^2 - c1^3))
    // higher order term to prevent ghost leakage: sig123 *c1^2 * c2^2 *c3^2
    + int2d(Th)(1/eta2 * w * sig123 * c2old * (4*c2old^2*c1^2 + 2*c1^4 + 6*c2old*c1^3 - 6*c2old*c1^2 - 4*c1^3 + 2*c1^2))

    + int2d(Th)(1/eta2 * (epssq/2) * w * (2) * S * c2 * dx(c1)^2)
    + int2d(Th)(1/eta2 * (epssq/2) * w * (2) * S * c2 * dy(c1)^2 )

    + int2d(Th)(1/eta2 * (epssq/2) * w * (-2) * S * c1 * (dx(c1)*dx(c2) + dy(c1)*dy(c2)) )

    + int2d(Th)(1/eta2 * (epssq/2) * w * (2) * sig23 * (dx(c1)*dx(c2) + dy(c1)*dy(c2)))

    + int2d(Th)(1/eta2 * (epssq/2) * w * (-2) * sig13 *dy(c1)^2)
    + int2d(Th)(1/eta2 * (epssq/2) * w * (-2) * sig13 * dx(c1)^2)

    + int2d(Th)(1/eta2 * (epssq/2) * (2*sig23 - 4*sig23*c1 + 2*S*c1^2) * (dx(c2)*dx(w) + dy(c2)*dy(w)))

    + int2d(Th)(1/eta2 * (epssq/2) * 2*sig23*c2 * (dx(c1) * dx(w) + dy(c1) * dy(w)))

    + int2d(Th)(1/eta2 * (epssq/2) * (-2*S*c2*c1 * (dx(c1)*dx(w) + dy(c1)*dy(w))))

    + int2d(Th)(1/eta2 * (epssq/2) * (2*sig13*c1 * (dx(c1)*dx(w) + dy(c1)*dy(w))))

    // conservation term: SUM_a lambda/12 * (Aa - A0a) * h(ca)
    // where h(ca) = int [ca^2 * (3 - 2*ca) ]
    + int2d(Th)(1/eta2 * ( w * lmda *(c2Area-A0c2)*c2*(1-c2old)))

    + int2d(Th) ( w * Drate * c1^2 * c2*c2old)

    - int2d(Th)(w * c2old/dt);

    // old one
    // func. derivative of gradient energy: eps^2/2 * SUM(a<b) sig_ab * abs(grad(ca-cb))^2
    // should give equilibrium profile gamma_ab = sqrt(2)/6  * eps * sig_ij
    // resulting in triangle: gamma_12 / sin(theta_3) = gamma_23 / sin(theta_1) = gamma_13 / sin(theta_2), theta_1 + theta_2 + theta_3 = 180
    // + int2d(Th)(1/eta2 * (epssq/2) * (2*sig12 + 8*sig23 + 2*sig13) * (dx(c2) * dx(w) + dy(c2) * dy(w)))
    // + int2d(Th)(1/eta2 * (epssq/2) * (-2*sig12 + 4*sig23 + 4*sig13) * (dx(c1) * dx(w) + dy(c1) * dy(w)))




problem SolveDummyc1(dummyc1, dummyv, master=0, solver=sparsesolver)

    =int2d(Th)(dummyv * (dummyc1)/dt)

    + int2d(Th)(1/eta * dummyv * 2*sig12*dummyc1old*c2^2)
    + int2d(Th)(1/eta * dummyv * 2*sig13*( -3*dummyc1old*dummyc1old + 2*dummyc1old*dummyc1old^2 + 3*dummyc1old*dummyc1old*c2 + dummyc1old - 2*dummyc1old*c2 + dummyc1old*c2^2 ) )
    + int2d(Th)(1/eta * dummyv *(2)*sig23*( dummyc1old*c2^2 ))
    + int2d(Th)(1/eta * dummyv *(-2)*sig23*(c2^2 - c2^3))
    + int2d(Th)(1/eta *dummyv*sig123 * dummyc1old * (4*dummyc1old^2*c2^2 + 2*c2^4 + 6*dummyc1old*c2^3 - 6*dummyc1old*c2^2 - 4*c2^3 + 2*c2^2))

    + int2d(Th)(1/eta * (epssq/2) * (2*sig12 + 8*sig13 + 2*sig23) * (dx(dummyc1) * dx(dummyv) + dy(dummyc1) * dy(dummyv)))
    + int2d(Th)(1/eta * (epssq/2) * (-2*sig12 + 4*sig13 + 4*sig23) * (dx(c2) * dx(dummyv) + dy(c2) * dy(dummyv)))

    + int2d(Th)(1/eta * ( dummyv * lmda *(c1Area-A0c1)*dummyc1*(1-dummyc1old)))

    // + int2d(Th)(1/eta * v * ( g2phase1) * (6 * c1*(1-c1old))  )

    + int2d(Th)( dummyv * Drate * dummyc1*dummyc1old*c2^2)

    - int2d(Th)(dummyv * dummyc1old/dt);


macro getAdaptMesh()
Th = adaptmesh(Th,interfacemesh,hmin=1.0/(n*refI),hmax=1.0/n,iso=true,ratio=mGrw,err=0.01,nbvx=5e4,periodic=[[2,y],[4,y],[1,x],[3,x]]);
w=0;
v=0;
// EOM

Vhfield interfacemesh;
Vhfield ToPlot;
macro MakeMesh()
interfacemesh = c1 + 20*c2;
// EOM

macro clip(f) ((f>1.)*1. + (f<0.)*0. + ((f>=0.)*(f<=1.))*f) // EOM
macro clip01(f) ((f<0.)*0. + ((f>=0.)*(f<=1.))*f) // EOM


real dR = 0.6;  // Radius
real dRrho = 0.4;  // Radius
real dxc= 0.0;  // x coordinate
real dyc= 3;  // y coordinate, 0.2 is start above gorund
real DropTh = 0.02;  // Drop thickness
real Lx = 3.0 * dR;  // x half-extent
real Ly = 1.0 * dR;  // y half-extent

// // func initc1 = -tanh(( max(abs((x - dxc) / Lx), abs((y - dyc) / Ly)) - 1.0 )/ DropTh);
// // func initc2 = 0.5 * (1.0- tanh(( max(abs((x - 0) / Lx), abs((y - 3) / Ly)) - 1.0 )/ DropTh));
// func initc2 = 0.5* (1.-tanh(( max(abs((x - dxc) / Lx), abs((y - 3.2) / Ly)) - 1.0 )/ DropTh));
// // func initc2 = 0.5 * (1.0- tanh((abs(y-3)-1)/ DropTh));

/* ---------- rectangular band for  c1  ---------- */
real bandH   = 0.7;              // THICKNESS of the band
real bandYC  = 1.0;              // VERTICAL CENTRE of the band
real gum = 0.02; 

// periodic distance in x so the band “wraps” cleanly across x = 0 and x = Lx
// func perX(real x) = min( abs(x)     , Lx - abs(x) );

/* 0-1 profile: value ≈1 inside the band, ≈0 outside */
// func initc1 = 0.5 * ( 1. - tanh( ( abs(y - bandYC) - bandH/2. ) / gum ) );
// func initc1 = 0.5* (1.-tanh(( max(abs((x - dxc) / 1.5), abs((y - 1.6) / Ly)) - 1.0 )/ DropTh));

func initc1 = 0.5* (1.-tanh( (abs((y - bandYC)) - bandH )/ 0.03));    
// func initc1 = 0.5 * (1.0 - tanh(( max(abs((x - dxc) / Lx), abs((y - 1.5) / Ly)) - 1.0 )/ (DropTh)));

/* ---------- semicircle sitting on the band for  c2  ---------- */
real R   = 0.8;                              // RADIUS  of the semicircle
real x0  = 0;                            // HORIZONTAL CENTRE
real y0  = bandH + bandYC;// bandYC + bandH/2.;            // VERTICAL CENTRE (touching band)

/* full (smoothed) circle field */
func circ  = sqrt(  (x - x0)^2  +  (y - y0)^2 );
func disk = 0.5 * ( 1. - tanh( (circ - R) / (eps) ) );

/* Heaviside-like mask so we keep only the UPPER half of the circle */
func mask = 0.5 * ( 1. + tanh( ( y - (y0) ) / gum ) );

/* final semicircle initial condition */
func initc2 = disk * mask;


c1 = initc1;
c2=initc2;
MakeMesh
getAdaptMesh


c1 = initc1;
c2=initc2;

MakeMesh
getAdaptMesh


c1 = initc1;
c2=initc2;

MakeMesh
getAdaptMesh

c1 = initc1;
c2=initc2;
c1old = c1;
c2old = c2;

GetArea;

// set constraints to initial areas
A0c1 = c1Area;
A0c2 = c2Area;
A0c3 = TotalArea - A0c1 - A0c2;

cout << c1Area << "\t" << c2Area << "\t" << c3Area << endl;

c1 = clip(initc1);
c2 = clip(initc2);

Vhfield sum12 = c1 + c2;
Vhfield factor  = 1.0 / max(1.0 , sum12);   // “./” is component-wise division
c1 = c1 * factor;   // rescale only where necessary
c2 = c2 * factor;


// c1 = c1-c2;
// c1 = (c1>0)*c1;

int nAdapt=0;
real curt=0.0;
// // Time stepping
int counter = 0;
bool recorded;
while(curt < endsim)//(maxCFL > 1e-4)
{
    // If needed, carry out mesh adaptation, solve again, adapt again
    if( nAdapt == dref)
    {
        // if (counter < 150)
        //     ElongateMesh(curt)
        cout << "    Mesh adpt 1, ";
        MakeMesh
        getAdaptMesh
        cout << endl;
        nAdapt++;
        nAdapt = 0;
        // n=20;
    }
    ++counter;
    if (counter % 10 == 0)
    {
        cout << "Time: " << curt << endl;
        // solve equations
        
        real c1mass = int2d(Th)(c1);
        cout << "c1 mass: " << c1Area << "  with constraint: " << A0c1 << endl;

        real c2mass = int2d(Th)(c2);
        cout << "c2 mass: " << c2Area << "  with constraint: " << A0c2 << endl;

        cout << "c3 mass: " << c3Area << "  with constraint: " << A0c3 << endl;
    }

    curt = curt+dt;
    c3=1-c1-c2;

    // c1interface=0;
    SolveOne;
    SolveTwo;

    GetArea;

    if (curt < endrelaxation)
    {
        A0c1 = c1Area;
        A0c2 = c2Area;
        A0c3 = c3Area;
    }
    if (curt >= endrelaxation)
    {
        eta=etasolid;
    }
    if (curt > endequilibrate)
    {
        Drate = endDrate;
    }

    if (counter % screenStep == 0 && printScreen)
    {
        ToPlot = c1-c2;
        plot(ToPlot,fill=1,value=1, wait=false);
        // plot(Th, wait=false);
    }
    
    // Prepare for the next time step
    c1old=c1;
    c2old=c2;

    // plot(c1, wait=true, fill=true, value=1);
    nAdapt++;

    if (counter % PrintStep == 0 && doPrint)
    {
        string outputn = folder1 + "image-" + curt + ".eps";
        plot(interfacemesh, ps=outputn, fill=1, value=true, wait=false);
        outputn = folder2 + "image-" + curt + ".eps";
        plot(c1, ps=outputn, fill=1, wait=false, value=true);
        outputn = folder3 + "image-" + curt + ".eps";
        plot(c2, ps=outputn, fill=1, wait=false, value=true);

    }

    if (doTimespan && counter % DataOutputStep == 0)
    {
        string filen = datafolder + "c1-" + curt + ".dat";
        ofstream TheFile(filen);
        Vhfield xx=x;
        Vhfield yy=y;
        for(int i=0; i< Vhfield.ndof; ++i)
        {
            TheFile << xx[][i] << "\t" << yy[][i] << "\t" << c1[][i] << endl;
        }

        filen = datafolder + "c2-" + curt + ".dat";
        ofstream TheFiletwo(filen);
        for(int i=0; i< Vhfield.ndof; ++i)
        {
            TheFiletwo << xx[][i] << "\t" << yy[][i] << "\t" << c2[][i] << endl;
        }

        if (c2Area < 0.01)
        {
            curt = endsim;
        }

    }
    if (RemoveCurvature)
    {

        c12 = c1 - c2;
        c13 = c1 - c3;
        c23 = c2 - c3;

        c12precurvatureX = dx(c12) / sqrt(dx(c12)^2 + dy(c12)^2 + epseps);
        c12precurvatureY = dy(c12) / sqrt(dx(c12)^2 + dy(c12)^2 + epseps);
        c12divprecurvature = dx(c12precurvatureX) + dy(c12precurvatureY);
        c12curvature = sqrt(dx(c12)^2 + dy(c12)^2) * c12divprecurvature;

        c13precurvatureX = dx(c13) / sqrt(dx(c13)^2 + dy(c13)^2 + epseps);
        c13precurvatureY = dy(c13) / sqrt(dx(c13)^2 + dy(c13)^2 + epseps);
        c13divprecurvature = dx(c13precurvatureX) + dy(c13precurvatureY);
        c13curvature = sqrt(dx(c13)^2 + dy(c13)^2) * c13divprecurvature;

        c23precurvatureX = dx(c23) / sqrt(dx(c23)^2 + dy(c23)^2 + epseps);
        c23precurvatureY = dy(c23) / sqrt(dx(c23)^2 + dy(c23)^2 + epseps);
        c23divprecurvature = dx(c23precurvatureX) + dy(c23precurvatureY);
        c23curvature = sqrt(dx(c23)^2 + dy(c23)^2) * c23divprecurvature;


        if (counter % 12 == 0 && curt > 0.2)
        {
            dummyc1 = c1;
            dummyc1old = dummyc1;
            for (int d = 0; d < 3; ++d)
            {
                SolveDummyc1;
                dummyc1old = dummyc1;        
            }
            absdelc1 = sqrt(dx(dummyc1)^2 + dy(dummyc1)^2);
            c1interface = (absdelc1 > 1);
        }
        if (curt < 0.2)
            c1interface=0;
    }
    else
    {
        c1interface=0;
    }

    if (PrintEnergy && counter % 10 == 0)
    {
        real doublewell = int2d(Th)(sig12*c1^2*c2^2 + sig13*c1^2*c2^2 + sig23*c2^2*c3^2 + sig123 * c1^2*c2^2*c3^2);
        real gradientenergy = int2d(Th)( epssq/2 *(sig12 * abs(c1*(dx(c2) + dy(c2) + c2*(dx(c1) + dy(c1)))) +  
                                                    sig13 * abs(c1*(dx(c3) + dy(c3) + c3*(dx(c1) + dy(c1)))) +
                                                    sig23 * abs(c2*(dx(c3) + dy(c3) + c3*(dx(c2) + dy(c2))) )  ))
        real volumeconstraint = lmda * ((c1Area - A0c1)^2 + (c2Area - A0c2)^2);
        real totalenergy = doublewell + gradientenergy + volumeconstraint;

        real suppressorterm = int2d(Th)(sig123 * c1^2*c2^2*c3^2 );

        // real t7 = lmdarho * (rhononphiArea - A0P)^2;
        // currently not removing curvature from rho.
        // real t8 = int2d(Th) ( (rhotwointerface * ((eps) * Rcurvature)));

        // coupling

        if (counter == 10)
        {
            string filen = datafolder + "total_energy" + parstr + ".dat";
            ofstream TheFileEn(filen);
            TheFileEn << curt << doublewell << "\t" << gradientenergy << "\t" 
                    << volumeconstraint << "\t" totalenergy << "\t" << suppressorterm << endl;
        }
        else
        {
            string filen = datafolder + "total_energy" + parstr + ".dat";
            ofstream TheFileEn(filen, append);
            TheFileEn << curt << doublewell << "\t" << gradientenergy << "\t" 
                    << volumeconstraint << "\t" totalenergy << "\t" << suppressorterm << endl;
        }
       
    }
}