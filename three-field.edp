load "gmsh";
load "iovtk";
load "UMFPACK64";
load "isoline";
load "Element_P3";

real endsim=202;
real endrelaxation=0.5; // n steps before swapping to phase field main
bool printScreen=true;
int screenStep = 5;
real equilibraterho=1; // use lower rho surface tension at the beginning of simulation

string parstr = "";
string dirstr = "";
if (ARGV.n > 3)
{
    parstr = "-" + ARGV[2] + "-" + ARGV[3] + "-" + ARGV[4];
    dirstr =  ARGV[2] + "-" + ARGV[3] + "-" + ARGV[4] + "/";
    printScreen = false;
}

verbosity=0;
int PrintStep=100;
bool doPrint=true;
bool doTimespan=true;
int DataOutputStep=200;
bool printinterface=false;
bool PrintEnergy=true;
string folder1 = "images/" + dirstr + "composite/";
string folder2 = "images/" + dirstr + "c1/";
string folder3 = "images/" + dirstr + "c2/";

// string folderrhotwo = "images/" + dirstr + "rhotwo-images/";
string commandstart = "mkdir images";
string command0 = "mkdir images/" + dirstr;
string command1 = "mkdir images/" + dirstr + "composite";
string command2 = "mkdir images/" + dirstr + "c1";
string command3 = "mkdir images/" + dirstr + "c2";
// string command6 = "mkdir images/" + dirstr + "rhotwo-images";

bool makeData = true;

if (dirstr == "")
{
    dirstr = "data/";
}

string datafolder = "model-output/" + dirstr;
string datacommand1 = "mkdir model-output";
string datacommand2 = "mkdir model-output/" + dirstr;

if (makeData)
{
    system(datacommand1);
    system(datacommand2);
}

if (doPrint)
{
    system(commandstart);
    system(command0);
    system(command1);
    system(command2);
    system(command3);
}
   

// -------------------------------------------------------------------------------------------------------------------------------------
// Mesh and grid

real xmin =  -2;
real xmax =  2;
real ymin =  0;
real ymax =  6;

// Mesh resolution
int  n     = 2; // Number of segments per unit length
real refI  = 12; // Refinement factor for the interface
real mGrw  = 1.2;  // Growth rate of the mesh elements
int  dref  = 10; // Number of time-steps between mesh adaption

mesh Th = square((xmax-xmin)*n,(ymax-ymin)*n,[xmin+(xmax-xmin)*x,ymin+(ymax-ymin)*y]);

// -------------------------------------------------------------------------------------------------------------------------------------
// Fields
fespace Vhfield (Th,P2,periodic=[[2,y],[4,y],[1,x],[3,x]]);
// -------------------------------------------------------------------------------------------------------------------------------------




Vhfield c1;
Vhfield c2;
Vhfield c3;
Vhfield c1old;
Vhfield c2old;
Vhfield v;
Vhfield w;

real dt = 0.01;
real sig12=5.;
real sig13=5;
real sig23=12;



if (ARGV.n > 3)
{
    sig12 = atof(ARGV[2]);
    sig13 = atof(ARGV[3]);
    sig23 = atof(ARGV[4]);
}

real k1 = sig12 + sig13 - sig23;
real k2 = sig12 + sig23 - sig13;
real k3 = sig13 + sig23 - sig12;
real epssq =0.0005;
real eta=1;
real lmda = 120;
real bigdelta = abs(max(k1,k2,k3))*30;
cout << "big delta is: " << bigdelta << endl;

real c1Area = 0;
real c2Area = 0;
real c3Area = 0;

real A0c1 = 1;
real A0c2 = 1;
real A0c3 = 1;

// Is this the correct way to do this?? I'm not sure.
real TotalArea = (ymax-ymin) * (xmax-xmin);

macro GetArea()

    c1Area = int2d(Th)(c1^2 * (3 - 2*c1));
    c2Area = int2d(Th)(c2^2 * (3 - 2*c2));

    c3Area =  TotalArea - c1Area - c2Area

// EOM


problem SolveOne(c1, v, master=0, solver=sparsesolver)
    =int2d(Th)(v * (c1)/dt)

    // double well terms
    + int2d(Th)( v * 2*sig12*c1*c2^2 )
    + int2d(Th)( v * 2*sig13*( c1*c3^2 - c1*c1old*c3 ) )
    + int2d(Th)( v *(-2)*sig23*c2^2*c3 )
    + int2d(Th)( epssq*k1*( dx(c1)*dx(v) + dy(c1)*dy(v) ) )
    + int2d(Th) ( epssq * k3 * (dx(c2) * dx(v) + dy(c2) * dy(v)))
    + int2d(Th) ( epssq * k3 * (dx(c1) * dx(v) + dy(c1) * dy(v)))

    + int2d(Th) (1/eta * ( v * lmda *(c1Area-A0c1)*c1*(1-c1old)))

    + int2d(Th) (v * ( 2*k1*c1*c2*c3 - k1*c1*c1old*c2 - k2*c1*c2^2 - 2*k3*c1*c2*c3 ))
    + int2d(Th) (v * ( k2 * c2^2*c3 + k3*c2*c3^2))
    + int2d(Th) (v * 6 * bigdelta * c1 * c2^2 * c3 * (c3 - c1old) )


    - int2d(Th)(v * c1old/dt);




problem SolveTwo(c2, w, master=0, solver=sparsesolver)
    =int2d(Th)(w * (c2)/dt)

    + int2d(Th)( w * 2*sig12*c2*c1^2 )
    + int2d(Th)( w * 2*sig23*( c2*c3^2 - c2*c2old*c3 ) )
    + int2d(Th)( w *(-2)*sig13*c1^2*c3 )
    + int2d(Th)( epssq*k2*( dx(c2)*dx(w) + dy(c2)*dy(w) ) )
    + int2d(Th) (1/eta * epssq * k3 * (dx(c2) * dx(w) + dy(c2) * dy(w)))
    + int2d(Th) (1/eta * epssq * k3 * (dx(c1) * dx(w) + dy(c1) * dy(w)))

    + int2d(Th) (1/eta * ( w * lmda *(c2Area-A0c2)*c2*(1-c2old)))

    + int2d(Th)( w*( - k1*c1^2* c2 - k2*c1^2 * c2  +2*k2*c1*c3*c2 -2*k3*c1*c3*c2 ))
    + int2d(Th)( w * ( k1*c1^2*c3 + k3*c1*c3^2  ))
    + int2d(Th)(w * 6 * bigdelta * c1^2 * c2 * c3 * (c3 - c2old) )


    - int2d(Th)(w * c2old/dt);



macro getAdaptMesh()
Th = adaptmesh(Th,interfacemesh,hmin=1.0/(n*refI),hmax=1.0/n,iso=true,ratio=mGrw,err=0.01,nbvx=5e4,periodic=[[2,y],[4,y],[1,x],[3,x]]);
w=0;
v=0;
// EOM

Vhfield interfacemesh;
macro MakeMesh()
interfacemesh = c1 - c2;
// EOM

macro clip(f) ((f>1.)*1. + (f<0.)*0. + ((f>=0.)*(f<=1.))*f) // EOM
macro clip01(f) ((f<0.)*0. + ((f>=0.)*(f<=1.))*f) // EOM


real dR = 0.6;  // Radius
real dRrho = 0.4;  // Radius
real dxc= 0.0;  // x coordinate
real dyc= 3;  // y coordinate, 0.2 is start above gorund
real DropTh = 0.1;  // Drop thickness
real Lx = dR;  // x half-extent
real Ly = dR;  // y half-extent

// // func initc1 = -tanh(( max(abs((x - dxc) / Lx), abs((y - dyc) / Ly)) - 1.0 )/ DropTh);
// // func initc2 = 0.5 * (1.0- tanh(( max(abs((x - 0) / Lx), abs((y - 3) / Ly)) - 1.0 )/ DropTh));
// func initc2 = 0.5* (1.-tanh(( max(abs((x - dxc) / Lx), abs((y - 3.2) / Ly)) - 1.0 )/ DropTh));
// // func initc2 = 0.5 * (1.0- tanh((abs(y-3)-1)/ DropTh));

/* ---------- rectangular band for  c1  ---------- */
real bandH   = 2.0;              // THICKNESS of the band
real bandYC  = 1.1;              // VERTICAL CENTRE of the band
real eps = 0.02; 

// periodic distance in x so the band “wraps” cleanly across x = 0 and x = Lx
// func perX(real x) = min( abs(x)     , Lx - abs(x) );

/* 0-1 profile: value ≈1 inside the band, ≈0 outside */
// func initc1 = 0.5 * ( 1. - tanh( ( abs(y - bandYC) - bandH/2. ) / eps ) );
func initc1 = 0.5* (1.-tanh(( max(abs((x - dxc) / 1.5), abs((y - 1.6) / Ly)) - 1.0 )/ DropTh));


/* ---------- semicircle sitting on the band for  c2  ---------- */
real R   = 0.8;                              // RADIUS  of the semicircle
real x0  = 0;                            // HORIZONTAL CENTRE
real y0  = bandYC + bandH/2.;            // VERTICAL CENTRE (touching band)

/* full (smoothed) circle field */
func circ  = sqrt(  (x - x0)^2  +  (y - y0)^2 );
func disk = 0.5 * ( 1. - tanh( (circ - R) / eps ) );

/* Heaviside-like mask so we keep only the UPPER half of the circle */
func mask = 0.5 * ( 1. + tanh( ( y - (bandYC + bandH/2.) ) / eps ) );

/* final semicircle initial condition */
func initc2 = disk * mask;


// plot(c1, wait=true, fill=true, value=1);
// plot(c2, wait=true, fill=true, value=1);
c1 = initc1;
c2=initc2;
MakeMesh
getAdaptMesh


c1 = initc1;
c2=initc2;

MakeMesh
getAdaptMesh


c1 = initc1;
c2=initc2;

MakeMesh
getAdaptMesh

c1 = initc1;
c2=initc2;
c1old = c1;
c2old = c2;

GetArea;

// set constraints to initial areas
A0c1 = c1Area;
A0c2 = c2Area;
A0c3 = TotalArea - A0c1 - A0c2;

cout << c1Area << "\t" << c2Area << "\t" << c3Area << endl;

c1 = clip(initc1);
c2 = clip(initc2);

Vhfield sum12 = c1 + c2;
Vhfield factor  = 1.0 / max(1.0 , sum12);   // “./” is component-wise division
c1 = c1 * factor;   // rescale only where necessary
c2 = c2 * factor;


// c1 = c1-c2;
// c1 = (c1>0)*c1;

int nAdapt=0;
real curt=0.0;
// // Time stepping
int counter = 0;
bool recorded;
while(curt < endsim)//(maxCFL > 1e-4)
{
    // If needed, carry out mesh adaptation, solve again, adapt again
    if( nAdapt == dref)
    {
        // if (counter < 150)
        //     ElongateMesh(curt)
        cout << "    Mesh adpt 1, ";
        MakeMesh
        getAdaptMesh
        cout << endl;
        nAdapt++;
        nAdapt = 0;
        // n=20;
    }
    ++counter;
    if (counter % 10 == 0)
    {
        cout << "Time: " << curt << endl;
        // solve equations
        
        real c1mass = int2d(Th)(c1);
        cout << "c1 mass: " << c1Area << "  with constraint: " << A0c1 << endl;

        real c2mass = int2d(Th)(c2);
        cout << "c2 mass: " << c2Area << "  with constraint: " << A0c2 << endl;

        cout << "c3 mass: " << c3Area << "  with constraint: " << A0c3 << endl;
    }

    curt = curt+dt;
    c3=1-c1-c2;
    SolveOne;
    SolveTwo;

    // c1 = clip(c1);
    // c2 = clip(c2);
    // Vhfield s  = c1 + c2;
    // Vhfield fac = 1.0 / max(1.0 , s);
    // c1 = c1 * fac;
    // c2 = c2 * fac;


    GetArea;

    if (curt < endrelaxation)
    {
        A0c1 = c1Area;
        A0c2 = c2Area;
        A0c3 = c3Area;
    }


    if (counter % screenStep == 0 && printScreen)
    {
        plot(interfacemesh,fill=1,value=1, wait=false);
    }

    // Prepare for the next time step
    c1old=c1;
    // c2=1-c1;
    c2old=c2;
    // rhotwoold = rhotwo;

    // plot(c1, wait=true, fill=true, value=1);
    nAdapt++;


    if (counter % PrintStep == 0 && doPrint)
    {
        string outputn = folder1 + "image-" + curt + ".eps";
        plot(interfacemesh, ps=outputn, fill=1, value=true, wait=false);
        outputn = folder2 + "image-" + curt + ".eps";
        plot(c1, ps=outputn, fill=1, wait=false, value=true);
        outputn = folder3 + "image-" + curt + ".eps";
        plot(c2, ps=outputn, fill=1, wait=false, value=true);

    }

    if (doTimespan && counter % DataOutputStep == 0)
    {
        string filen = datafolder + "c1-" + curt + ".dat";
        ofstream TheFile(filen);
        Vhfield xx=x;
        Vhfield yy=y;
        for(int i=0; i< Vhfield.ndof; ++i)
        {
            TheFile << xx[][i] << "\t" << yy[][i] << "\t" << c1[][i] << endl;
        }

        filen = datafolder + "c2-" + curt + ".dat";
        ofstream TheFiletwo(filen);
        for(int i=0; i< Vhfield.ndof; ++i)
        {
            TheFiletwo << xx[][i] << "\t" << yy[][i] << "\t" << c2[][i] << endl;
        }

    }

}




// problem SolveOne(c1, v, master=0, solver=sparsesolver)
//     =int2d(Th)(v * (c1)/dt)

//     // double well terms
//     + int2d(Th)(1/eta * v * 2 * sig12 * c1 * c2^2 )
//     + int2d(Th)(1/eta * v * sig13 * ( c1  - 3*c1*c1old - 2*c1*c2 + 2*c1*c1old^2 + c1*c2^2 + 3*c1*c1old*c2))
//     + int2d(Th)(1/eta * v * sig23 * ( c1*c2^2 ))
//     + int2d(Th)(1/eta * v * sig23 * ( - c2^2 + c2^3 ))

//     // gradient energy terms
//     + int2d(Th) (1/eta * epssq * k1 * (dx(c1) * dx(v) + dy(c1) * dy(v)))
//     + int2d(Th) (1/eta * epssq * k3 * (dx(c1) * dx(v) + dy(c1) * dy(v)))
//     + int2d(Th) (1/eta * epssq * k3 * (dx(c2) * dx(v) + dy(c2) * dy(v)))

//     // volume constraints:
//     + int2d(Th) (1/eta * ( v * lmda *(c1Area-A0c1)*c1*(1-c1old)))

//     /*
//     // higher order term part 1:
//     + int2d(Th)( (1/eta) * v * ( (k3-k2)*c2^3 + (k2-2*k3)*c2^2 + k3*c2 ))
//     + int2d(Th)( (1/eta) * v * ( 3*(k3-k1)*c1*c1old*c2  +  2*(2*k3-k1-k2)*c1*c2^2  +  2*(k1-2*k3)*c1*c2 ))
//     // higher order term part 2:
//     + int2d(Th) ((1/eta) * v * bigdelta * ( 18*c1*c1old*c2^3  +  12*c1*c1old^2*c2^2  +  6*c1*c2^4  - 18*c1*c1old*c2^2  + 6*c1*c2^2  - 12*c1*c2^3 ))
//     */

//     - int2d(Th)(v * c1old/dt);

//     // removed c3 volume constraint
//     // + int2d(Th)( (1/eta) * v * lmda * (c3Area - A0c3) * (c1old + c2) )
//     // - int2d(Th)( (1/eta) * v * lmda * (c3Area - A0c3) * c2 * (c1old + c2) )
//     // - int2d(Th)( (1/eta) * v * lmda * (c3Area - A0c3) * c1 * (c1old + c2) )



// problem SolveTwo(c2, w, master=0, solver=sparsesolver)
//     =int2d(Th)(w * (c2)/dt)

//     // double well terms
//     + int2d(Th)(1/eta * w * sig12 * c2 * c1^2 )
//     + int2d(Th)(1/eta * w * sig23 * ( c2  - 3*c2*c2old - 2*c2*c1 + 2*c2*c2old^2 + c2*c1^2 + 3*c2*c2old*c1))
//     + int2d(Th)(1/eta * w * sig13 * ( c2*c1^2 ))
//     + int2d(Th)(1/eta * w * sig13 * ( c1^3- c1^2  ))

//     // gradient energy terms
//     + int2d(Th) (1/eta * epssq * k2 * (dx(c2) * dx(w) + dy(c2) * dy(w)))
//     + int2d(Th) (1/eta * epssq * k3 * (dx(c2) * dx(w) + dy(c2) * dy(w)))
//     + int2d(Th) (1/eta * epssq * k3 * (dx(c1) * dx(w) + dy(c1) * dy(w)))

//     // volume constraint:
//     + int2d(Th) (1/eta * ( w * lmda *(c2Area-A0c2)*c2*(1-c2old)))

//     /*
//     // higher order term part 1:
//     + int2d(Th)( (1/eta) * w * ( (k3-k1)*c1^3 + (k1-2*k3)*c1^2 + k3*c1 ))
//     + int2d(Th)( (1/eta) * w * ( 3*(k3-k2)*c2*c2old*c1  +  2*(2*k3-k2-k1)*c2*c1^2  +  2*(k2-2*k3)*c2*c1 ))
//     // higher order term part 2:
//     + int2d(Th) ((1/eta) * w * bigdelta * ( 18*c2*c2old*c1^3  +  12*c2*c2old^2*c1^2  +  6*c2*c1^4  - 18*c2*c2old*c1^2  + 6*c2*c1^2  - 12*c2*c1^3 ))
//     */
//     - int2d(Th)(w * c2old/dt);