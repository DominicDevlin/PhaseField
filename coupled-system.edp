// ----------------------------------------------- COPYRIGHT --------------------------------------
// Copyright 2020-2022
// Ugis Lacis, ugis.lacis@gmail.com
// Shervin Bagheri, shervin.bagheri@mech.kth.se
// -------------------------------------------- LICENSE LGPLv3 ------------------------------------
// This file is part of FreeFEM-NS-CH.
//
// Porous_full_bc2ifScales is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// FreeFEM-NS-CH is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with FreeFEM-NS-CH. If not, see <http://www.gnu.org/licenses/>.

// Level of output
verbosity = 0;

load "gmsh";
load "iovtk";
load "UMFPACK64";
load "isoline";
load "Element_P3";
// load "MUMPS";

// Physical parameters in dimensional units (properties at 25 deg) 
// Reference L = 0.125 mm, muw = 8.9e-4 Pa s, rhow = 1000 kg/m3, mug = 1.85e-5, rhog = 1.18 kg/m3, sigma = 0.072 N/m
// Ca = muw*U/sigma = 0.1 -> Uref = 8.09 m/s, Tref = L/U = 0.01545 ms

// Impact velocity [m/s]
real Uimp = 2.0;


// Other physical parameters

// According to Yue sharp interface, Pe < 16*sqrt(mu)*Ca/Cn = 8.615 (for these parameters)
real Pe  = 7.116318;      // Small Pe number - seems that I need more non-lin iterations; or smaller time step
real Re  = 907.4;
real mu2 = 1.812e-2;
real rho1 = 0.1;
real rho2= 1.206e-3;
real thE = 112.0/180.0*pi;
real mufa= 79.96;
real Ca  = 0.1*rho1;
real Cn  = 0.025;


// Domain extent (use 0.125 mm as reference length scale)
real xmin = -4.15;
real xmax =  4.15;
real ymin =  0.0;
real ymax =  3.85;


// Initial parameters of the drop
real dR = 1.0;  // Radius
real dxc= 0.0;  // x coordinate
real dyc= 1.0 + 0.2;  // y coordinate, 0.2 is start above gorund
real yct= dyc; // Variable to track the y coordinate of center of mass
real xct= dxc; // -;- x coordinate -;-


// Mesh resolution
int  n     = 4; // Number of segments per unit length
real refI  = 4.0; // Refinement factor for the interface
// refI = 30.0;
real mGrw  = 1.2;  // Growth rate of the mesh elements

// Other parameters, time step, duration, save, tolerances, etc.
real dt    = 0.002;
real tfin  = 10.0;
real tout  = 0.02;
int  dref  = 10; // Number of time-steps between mesh adaption

// Initialise the drop
// func initC = -tanh((sqrt((x-dxc)^2+(y-dyc)^2)-dR)/sqrt(2)/Cn);
func initC = -tanh((abs(x - dxc) + abs(y - dyc) - dR) / sqrt(2) / Cn);


// Define the mesh (1 - bottom, 2 - right, 3 - top, 4 - left), plot
// // Smooth surface
mesh Th = square((xmax-xmin)*n,(ymax-ymin)*n,[xmin+(xmax-xmin)*x,ymin+(ymax-ymin)*y]);


// Define needed FE spaces and functions
fespace Ph2 (Th,P2,periodic=[[2,y],[4,y]]);
fespace Ph1 (Th,P1,periodic=[[2,y],[4,y]]);
fespace PFh1(Th,[P1,P1],periodic=[[2,y],[4,y]]);
fespace FLh (Th,[P2,P2,P1],periodic=[[2,y],[4,y]]);
FLh [u,v,p], [uu,vv,pp], [uO,vO,pO];
Ph2 str, vstr;
PFh1 [fi,c], [fifi,cc], [fiO,cO];

// Define density and viscosity as functions of phase field variable, always centered in time
func rho = (c >=-1.0)*(c <=1.0)*0.5*(rho1*(c + 1)-rho2*(c -1)) + (c <-1.0)*rho2 + (c >1.0)*rho1;
func rhoO= (cO>=-1.0)*(cO<=1.0)*0.5*(rho1*(cO + 1)-rho2*(cO-1)) + (cO<-1.0)*rho2 + (cO>1.0)*rho1;
func mu  = (c >=-1.0)*(c <=1.0)*0.5*(c +1-mu2* (c -1)) + (c <-1.0)*mu2  + (c >1.0);
func muO = (cO>=-1.0)*(cO<=1.0)*0.5*(cO+1-mu2* (cO-1)) + (cO<-1.0)*mu2  + (cO>1.0);


// -------------------------------------------------------------------------------------------------------------------------------------
// Compilation of macros


// Mesh adaptation and destruction of the old mesh
macro getAdaptMesh()
Th = adaptmesh(Th,c,hmin=1.0/(n*refI),hmax=1.0/n,iso=true,ratio=mGrw,err=0.01,nbvx=1e5,periodic=[[2,y],[4,y]]);
[uu,vv,pp] = [0,0,0]; [fifi,cc]  = [0,0];
[u,v,p]    = [u,v,p]; [uO,vO,pO] = [uO,vO,pO];
[fi,c] = [fi,c]; [fiO,cO] = [fiO,cO];
// EOM


// Macro for non-linear solutions
macro solveNonLinPFeq()
eq12phasefield;
cout << "PF done ";
// EOM


macro solveNonLinNSeq()
NStokesExpl;
cout << "NS done ";
// EOM


// Macro for checking the maxmial CFL number
real maxCFL;
int nt;
real mgU, xa, xb, ya, yb, ds;

macro getMaxCFL()
nt = Th.nt;
maxCFL = 0.0;
for(int i=0; i<nt; i++)
{
    for(int j=0; j<3; j++)
    {
        xa = Th[i][ j     ].x; ya = Th[i][ j     ].y;
        xb = Th[i][(j+1)%3].x; yb = Th[i][(j+1)%3].y;
        ds = sqrt((xb-xa)^2+(yb-ya)^2);
        mgU = max(sqrt(u(xa,ya)^2+v(xa,ya)^2),sqrt(u(xb,yb)^2+v(xb,yb)^2));
        maxCFL = max(maxCFL,mgU*dt/ds);
    }
}
// EOM


macro PrintFreeEnergy()




// EOM


// Macro for checking the maxmial Von-Neummann number
real maxVN;
macro getMaxVN()
nt = Th.nt;
maxVN = 5.0;
for(int i=0; i<nt; i++)
{
    for(int j=0; j<3; j++)
    {
        xa = Th[i][ j     ].x; ya = Th[i][ j     ].y;
        xb = Th[i][(j+1)%3].x; yb = Th[i][(j+1)%3].y;
        ds = sqrt((xb-xa)^2+(yb-ya)^2);
        maxVN = min(maxVN,ds);
    }
}
maxVN = 1/Pe*dt/maxVN^2;
// EOM
// -------------------------------------------------------------------------------------------------------------------------------------
// End of macro compilation
// -------------------------------------------------------------------------------------------------------------------------------------

real cTh = cos(thE);


// Cahn-Hilliard equations
problem eq12phasefield([fi,c],[fifi,cc],solver=sparsesolver,master=0)
    = int2d(Th)    ( dt*fi*fifi - dt*c*(cO^2  )*fifi - dt*Cn^2*(dx(c)*dx(fifi)+dy(c)*dy(fifi))  )
    + int2d(Th)    (                     +dt*cO*fifi                                            )
    + int1d(Th,1,3)(-dt*sqrt(2)/2*Cn*cTh*c*cO*fifi  - 2*sqrt(2)/3*Cn^2*Ca*mufa*(c  + dt*uO*dx(c)+dt*vO*dy(c) )*fifi )
    + int1d(Th,1,3)( dt*sqrt(2)/2*Cn*cTh     *fifi  + 2*sqrt(2)/3*Cn^2*Ca*mufa* cO                            *fifi )
    + int2d(Th)    ( c *cc - dt*c*(uO*dx(cc)+vO*dy(cc)) + dt*3/(4*sqrt(2))/Pe*(dx(fi )*dx(cc)+dy(fi )*dy(cc)) )
    + int2d(Th)    (-cO*cc                              + dt*3/(4*sqrt(2))/Pe*(dx(fiO)*dx(cc)+dy(fiO)*dy(cc)) )
    + int1d(Th,1,3)( dt*c*(uO*N.x+vO*N.y)*cc );

// Navier-Stokes equations
problem NStokesExpl([u,v,p],[uu,vv,pp],solver=sparsesolver,master=0)
    = int2d(Th)(   dt/Re*(-p + 2.0*mu*dx(u))*dx(uu) + dt/Re*mu*(dy(u)+dx(v))*dy(uu)
                 + dt/Re*(-p + 2.0*mu*dy(v))*dy(vv) + dt/Re*mu*(dx(v)+dy(u))*dx(vv)
                   - (dx(u)+dy(v))*pp - 1e-10*p*pp
                + rho *( (u *uu+v *vv) + dt*(uO*dx(u )+vO*dy(u ))*uu + dt*(uO*dx(v )+vO*dy(v ))*vv
                                       + dt*(u *dx(uO)+v *dy(uO))*uu + dt*(u *dx(vO)+v *dy(vO))*vv )  )
    + int2d(Th)(  rho *(-(uO*uu+vO*vv) - dt*(uO*dx(uO)+vO*dy(uO))*uu - dt*(uO*dx(vO)+vO*dy(vO))*vv )
                 - 3/(2*sqrt(2))*dt*fiO*(dx(cO)*uu+dy(cO)*vv)/(Cn*Ca*Re) )
    + on(1,3,u=0,v=0);
               
// Initialisation
[fi,c] = [0,initC];
// Initial mesh adaptation
getAdaptMesh
// Reinitialise the function, since it has a known value, adapt mesh again
[fi,c] = [0,initC];
getAdaptMesh
// Reinitialise the function, since it has a known value, adapt mesh again
[fi,c] = [0,initC];
getAdaptMesh
// Final initialisation of the function
[fi,c] = [0,initC];


// Getting updated CL coordinates for slip transition

// Velocity is initialised after slip can be computed.
// velocity initialised to 0 when c=0.
[u,v,p] = [0,-Uimp*(c+1)/2,0];

// Remaining initialisation
uO[] = u[];
fiO[] = fi[];

cout << cTh << endl;

int nAdapt;
real curt;

// Plot initial mesh and pf distribution
//plot(t,fill=1,value=1);
plot(Th, wait=true);
//plot(u,fill=1,value=1);
plot(c,fill=1,value=1);
// plot(fi,fill=1,value=1);


// // Time stepping
real divChck, dxdtChck = 10.0, dxOld = 0.0, dxNew;
int  NstedChck = 0;
maxCFL = 0.1;
// continue simulation until CFL condition fails
while(true)//(maxCFL > 1e-4)
{
    // If needed, carry out mesh adaptation, solve again, adapt again
    if( nAdapt == dref)
    {
        cout << "    Mesh adpt 1, ";
        getAdaptMesh
        solveNonLinPFeq
        cout << " ";
        solveNonLinNSeq
        cout << endl << "    Mesh adpt 2, ";
        getAdaptMesh
        getMaxVN
        solveNonLinPFeq
        cout << " ";
        solveNonLinNSeq
        cout << ", " << maxVN << endl;
        nAdapt++;
        //plot(Th);
        nAdapt = 0;
    }

    // Solve the PF equations
    curt = curt+dt;
    cout << "ct = " << curt << ", ";
    solveNonLinPFeq
    // Prepare for and solve NS equations
    cout << " ";
    solveNonLinNSeq
    getMaxCFL
    plot(c,fill=1,value=1);    
    cout << " CFL " << maxCFL << " dxdt " << dxdtChck << endl;

    // Prepare for the next time step
    uO[] = u[]; fiO[] = fi[]; dxOld = dxNew;
    nAdapt++;
    // plot(fi,fill=1,value=1);
    plot(c,fill=1,value=1, wait=false);
    // plot(Th, wait=true);
    // plot(u,fill=1,value=1);
}
