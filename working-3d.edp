load "gmsh";
load "iovtk";
load "UMFPACK64";
load "isoline";
load "Element_P3";
load "msh3";
load "tetgen"; 
load "mshmet"; 
load "medit";
// time needs to increase since we made thinner boundary.
real endsim=201;
real endrelaxation=0.2; // n steps before swapping to phase field main
bool printScreen=true;
int screenStep = 1;
real equilibraterho=1; // use lower rho surface tension at the beginning of simulation

string parstr = "";
string dirstr = "";
if (ARGV.n > 3)
{
    parstr = "-" + ARGV[2] + "-" + ARGV[3] + "-" + ARGV[4];
    dirstr =  ARGV[2] + "-" + ARGV[3] + "-" + ARGV[4] + "/";
    printScreen = false;
}

verbosity=0;
int PrintStep=5000;
bool doPrint=true;
bool doTimespan=false;
int timePrint=100;
bool printinterface=false;
bool PrintEnergy=true;
string foldern = "images/" + dirstr + "phirho-images/";
string folderint1 = "images/" + dirstr + "interface1/";
string folderint2 = "images/" + dirstr + "interface2/";
string folderphi = "images/" + dirstr + "phi-images/";
string folderrho = "images/" + dirstr + "rho-images/";
// string folderrhotwo = "images/" + dirstr + "rhotwo-images/";
string commandstart = "mkdir images";
string command0 = "mkdir images/" + dirstr;
string command1 = "mkdir images/" + dirstr + "phirho-images";
string command2 = "mkdir images/" + dirstr + "interface1";
string command3 = "mkdir images/" + dirstr + "interface2";
string command4 = "mkdir images/" + dirstr + "phi-images";
string command5 = "mkdir images/" + dirstr + "rho-images";
// string command6 = "mkdir images/" + dirstr + "rhotwo-images";

bool makeData = true;

if (dirstr == "")
{
    dirstr = "data/";
}

string datafolder = "model-output/" + dirstr;
string datacommand1 = "mkdir model-output";
string datacommand2 = "mkdir model-output/" + dirstr;

if (makeData)
{
    system(datacommand1);
    system(datacommand2);
}


if (doPrint)
{
    system(commandstart);
    system(command0);
    if (printinterface)
    {
        system(command2);
        system(command3);
    }
    system(command1);
    system(command4);
    system(command5);
    // system(command6);
}
   

// -------------------------------------------------------------------------------------------------------------------------------------
// Mesh and grid

real xmin =  -2;
real xmax =  2;
real ymin =  0;
real ymax =  6;
int zmin = -2;
int zmax = 2;

// Mesh resolution
int  n     = 20; // Number of segments per unit length
real refI  = 16.0; // Refinement factor for the interface
real mGrw  = 1.6;  // Growth rate of the mesh elements
int  dref  = 10; // Number of time-steps between mesh adaption



mesh3 Th = cube(24,36,24,[xmin+(xmax-xmin)*x,ymin+(ymax-ymin)*y, (zmin+(zmax-zmin)*z)]);
fespace Vhfield(Th,P2);
// -------------------------------------------------------------------------------------------------------------------------------------
// Fields
// fespace Vhfield (Th,P2,periodic=[[2,y],[4,y],[1,x],[3,x]]);
// fespace Vhfield (Th,P2);
Vhfield phi;
Vhfield v;
Vhfield phiold;
Vhfield u;

Vhfield rho;
Vhfield rhoold;
Vhfield w;
Vhfield rhomesh;

Vhfield absdelphi;
Vhfield phiinterface;

Vhfield rhophiinterface;
Vhfield rhooutside;

Vhfield RhoPhiPlot;
Vhfield curvature;
Vhfield boolRhoPhitoPlot;

Vhfield precurvatureX;
Vhfield precurvatureY;
Vhfield divprecurvature;


// -------------------------------------------------------------------------------------------------------------------------------------
// Compilation of macros

// Mesh adaptation and destruction of the old mesh
// macro getAdaptMesh()
// Th = adaptmesh(Th,rhomesh,hmin=1.0/(n*refI),hmax=1.0/n,iso=true,ratio=mGrw,err=0.01,nbvx=4e5,periodic=[[1,x,z], [2,y,z], [3,x,z], [4, y,z], [5,x,y], [6,x,y]]);
// v = 0;
// w=0;
// phi = phi;
// // EOM

macro MakeRhoPhiMesh()
RhoPhiPlot = phi * (rho * 2 - 1) ;
rhomesh = RhoPhiPlot;
// EOM

real phimoved=0;


// Macro for non-linear solutions
macro solvePhase()
{

    BalanceDifferentiation;

    {
        precurvatureX = dx(phi) / sqrt(dx(phi)^2 + dy(phi)^2 + epseps);
        precurvatureY = dy(phi) / sqrt(dx(phi)^2 + dy(phi)^2 + epseps);
        divprecurvature = dx(precurvatureX) + dy(precurvatureY);
        curvature = sqrt(dx(phi)^2 + dy(phi)^2) * divprecurvature;

        RhoField;

        phasefield;

    }

    real gain = absgrowth - diffamount;
    rhoArea = rhoArea + gain;
    rhoArealb = rhoArealb + gain;

    A0 = A0 + absgrowth;
    
}
// EOM

    // if (counter < endrelaxation)
    // {
    //     absdelphi = sqrt(dx(dummyphi)^2 + dy(dummyphi)^2);
    //     phiinterface = (absdelphi * dummyphi > 0.04);
    //     relaxphasefield;
    //     RhoField;
    // }
    // else 

macro BalanceDifferentiation()
{
    diffamount = RhoDifferentiate;
}
//EOM


real phiArea=0.;
real rhoArea=0.;
real rhoArealb=0.;

real rhophiArea=0.;
real rhononphiArea=0.;


macro GetArea()
    rhononphiArea = int3d(Th)((phi < 1)*(1-phi)*rho^2 * (3 - 2*rho));
    rhophiArea = int3d(Th)((phi < 1) * phi * (rho)^2 * (3 - 2*(rho)) + (phi>1) * (rho)^2 * (3 - 2*(rho)));
    phiArea = int3d(Th)(phi^2 * (3 - 2*phi));
// EOM
//- int2d(Th)((rho*phi)^2 * (3 - 2*(rho*phi)));

real gammaphi=0.;     // surface tension of phi

real eta = 1;             // viscosity type1
real eta2 = 1;             // viscocity type2
real a = 1;               // Coefficient a 
real eps = 0.001;               // phase width coefficient k
real lmda = 10;               // concentration constraint
real lmdarho = 10;               // concentration constraint
real lmdarhophi = 10;               // concentration constraint
real A0 = 3.143;              // Target value for A
real epseps = 1e-9;           // small prefactor for 1/sqrt
real dt = 0.01;

real phitension=1;
real rhophitension=10;
real rhotension=7;



if (ARGV.n > 3)
{
    phitension = atof(ARGV[2]);
    rhophitension = atof(ARGV[3]);
    rhotension = atof(ARGV[4]);
    makeData=true;
}

// real aP = initaP;               // Coefficient a (increased need to be at 1 or 0, increase causes decreases interface length)
// real kP = initkP;               // smoothness of interface transition, decrease causes decrease in interface length
real A0P = 3.143;              // Target value for A
real A0RP = 0.;

// real initaP = 1; // for equilibration (equal to phi)
// real initkP = 0.0001; // for equilibration NOTE: MIGHT BE BETTER AT slightly lower value than phi for sharper interface
// real trueaP = initaP*rhophitension;  //initaP * 15;
// real truekP = initkP*rhophitension;// initkP * 15;

real apt=0;
real kpt=0;

real A0RPtwo=0;
real A0Ptwo=0;

bool dynamicdiff = false;

// dynamic
real diffrate =0.;//1e-4;// 1e-4;//1e-4;//1e-4;
real addproportion = 0.; // between 0 and 1
real addrate=addproportion * diffrate;//0.25e-4;//0.5e-4;
real netrate=1;
if (addrate > 0)
    netrate=(diffrate-addrate)/diffrate;

// non dynamic
real diffparam = 0.02; // this is being treated dynamically if dynamic param is true.
real absgrowth = 0;

real diffamount=0;

real upperdifflimit=0.6;
real lowerdifflimit=0.4;



// adhesion to surface (negative means adhesion), currently depracated.
real gammas=10;
// adhesion between two cell types
real gammaSL=-0.03;




/* the below equation has the curvature term removed*/
problem phasefield(phi, v, master=0, solver=sparsesolver) // , 
    = int3d(Th) (  v * (phi)/dt  )
    + int3d(Th) (1/eta * phitension * a * (v* 0.5 * phi - v*1.5*phi*phiold + v*phi*phiold^2))
    + int3d(Th) (1/eta *  phitension  * (eps * (dx(v) *dx(phi) + dy(v) * dy(phi))))
    + int3d(Th) ( (1/eta * phitension * phiinterface * ((eps) * v * curvature )))
    + int3d(Th) (1/eta * ( v * (12. * lmda *(phiArea-A0)*phi*(1-phiold))))
    - int3d(Th) (  v * (phiold)/dt  )

    + int3d(Th) (1/eta * phi * rhophitension * a * (v * 0.5 * rho - 1.5*v*rho*rho + v*rho * rho^2))
    + int3d(Th) (1/eta * phi * rhophitension * (eps * (dx(rho) * dx(v) + dy(rho) * dy(v))))

    + int3d(Th) (1/eta * (phiold < 1) * (1) * rhotension * a * (v * 0.5 * rho - 1.5*v*rho*rho + v*rho * rho^2))
    + int3d(Th) (1/eta * (phiold < 1) * (-phi) * rhotension * a * (v * 0.5 * rho - 1.5*v*rho*rho + v*rho * rho^2))
    + int3d(Th) (1/eta * (phiold < 1) * (1) * rhotension * (eps * (dx(rho) * dx(v) + dy(rho) * dy(v))))
    + int3d(Th) (1/eta * (phiold < 1) * (-phi) *rhotension * (eps * (dx(rho) * dx(v) + dy(rho) * dy(v))))

    + int3d(Th) (1/eta * ( v * (12 * lmdarhophi *(rhophiArea-A0RP)*rho*phi*(1-rho))))
    + int3d(Th) (1/eta * ( v * (12 * lmdarho *(rhononphiArea-A0P)*(1)*rho*(1-rhoold))))
    + int3d(Th) (1/eta * ( v * (12 * (phiold < 1) * lmdarho *(rhononphiArea-A0P)*(-phi)*rho*(1-rhoold))))
    // + int3d(Th) (1/eta * ( v * (12 * lmdarho *(rhoArea-A0P)*rho*(1-rho))))
    // - int3d(Th) ((phiold > upperdifflimit) * (rho < lowerdifflimit) * phi * diffparam * v * sqrt(dx(rho)^2 + dy(rho)^2))
    +on(1,2,3,4,5,6,phi=0);
    



func RhoDifferentiate = int3d(Th) (dt * (phi > upperdifflimit) * (rho < lowerdifflimit) * diffparam * phi * sqrt(dx(rho)^2 + dy(rho)^2));



problem RhoField(rho, w, master=0, solver=sparsesolver)
    = int3d(Th) (w * (rho)/dt )
    + int3d(Th) (1/eta * (1-phi) * (phi < 1) * rhotension * rho * (0.5 * w * a - 1.5*w*a*rhoold + w*a*rhoold^2))
    + int3d(Th) (1/eta * (1-phi) *  (phi < 1) * rhotension * (eps * (dx(w) *dx(rho) + dy(w) * dy(rho))))
    + int3d(Th) (1/eta * ( w * (phi < 1) * (12 *  lmdarho *(rhononphiArea-A0P)*(1-phi)*rho*(1-rhoold))))
    + int3d(Th) (1/eta * (phi)* rho *  rhophitension * (0.5 * w * a - 1.5*w*a*rhoold + w*a*rhoold^2))
    + int3d(Th) (1/eta * (phi) * rhophitension * (eps * (dx(w) *dx(rho) + dy(w) * dy(rho))))    
    // + int3d(Th) (1/eta * (phi-rhoold) * (phi > rhoold) * rho *  rhophitension * (0.5 * w * a - 1.5*w*a*rhoold + w*a*rhoold^2))
    // + int3d(Th) (1/eta * (phi-rhoold) * (phi > rhoold) * rhophitension * (eps * (dx(w) *dx(rho) + dy(w) * dy(rho))))    
    + int3d(Th) (1/eta * ( w * (12 * lmdarhophi *(rhophiArea-A0RP)*rho*phi*(1-rhoold))))
    // + int3d(Th) (1/eta * ( w * (12 * lmdarhophi *rho*(1-rhoold)*(rhoold > phi))))
    // + int3d(Th) ( (1/eta * rhointerface * ((k) * w * Rcurvature)))
    // in strong form (slightly in correc)
    // + int3d(Th) (rhointerface * diffparam * w ) // slightly incorrect ues of diffparam as constant,
    // in weak form . Trying without a phi in here
    + int3d(Th) ((phi > upperdifflimit) * (rhoold < lowerdifflimit) * diffparam * w * phi * sqrt(dx(rhoold)^2 + dy(rhoold)^2))
    - int3d(Th) ( w * (rhoold)/dt  )
    +on(1,2,3,4,5,6,rho=0);

    // + int3d(Th) (1/eta * (eps * (dx(w) *dx(rho) + dy(w) * dy(rho))))
    // - int3d(Th) (1/eta * phitension * w * phi^2 * (1-phi)^2)
    // - int3d(Th) (1/eta * phitension * w * eps * sqrt(dx(phi)^2 + dy(phi)^2));
    // + int3d(Th) (1/eta * (1) * w * (rhoold < 1) * phitension * a * (0.5 * phi - 1.5*phi*phiold + phi*phiold^2))
    // + int3d(Th) (1/eta * (-rho) * w * (rhoold < 1) * phitension * a * (0.5 * phi - 1.5*phi*phiold + phi*phiold^2))
    // + int3d(Th) (1/eta * (1) * (rhoold < 1) * phitension * (eps * (dx(w) *dx(phi) + dy(w) * dy(phi))))
    // + int3d(Th) (1/eta * (-rho) * (rhoold < 1) * phitension * (eps * (dx(w) *dx(phi) + dy(w) * dy(phi))))

Vhfield dummyphi;
Vhfield dummyphiold;
Vhfield dummyv;
real dtau = dt;

problem DummyPhaseField(dummyphi, dummyv, master=0, solver=sparsesolver) // , 
    = int3d(Th) (  dummyv * (dummyphi)/dtau  )
    + int3d(Th) (1/eta * (0.5 * dummyv * dummyphi - 1.5*dummyv*dummyphi*dummyphiold + dummyv*dummyphi*phiold^2))
    + int3d(Th) (1/eta * (eps * (dx(dummyv) *dx(dummyphi) + dy(dummyv) * dy(dummyphi))))
    + int3d(Th) (1/eta * ( dummyv * (12 * lmda *(phiArea-A0)*dummyphi*(1-dummyphiold))))
    - int3d(Th) (  dummyv * (dummyphiold)/dtau  )
    +on(1,2,3,4,5,6,dummyphi=0);

Vhfield dummyrho;
Vhfield dummyrhoold;
Vhfield dummyw;

// problem DummyRhoField(dummyrho, dummyw, master=0, solver=sparsesolver) // , 
//     = int3d(Th) (  dummyw * (dummyrho)/dtau  )
//     + int3d(Th) (1/eta * a * (0.5 * dummyw * dummyrho - 1.5*dummyw*dummyrho*dummyrhoold + dummyw*dummyrho*phiold^2))
//     + int3d(Th) (1/eta * (eps * (dx(dummyw) *dx(dummyrho) + dy(dummyw) * dy(dummyrho))))
//     + int3d(Th) (1/eta * ( dummyw * (12 * lmda *(rhoArea-A0P)*dummyrho*(1-dummyrhoold))))
//     - int3d(Th) (  dummyw * (dummyrhoold)/dtau  );



// currently do not know if curvature removal energy is correct?? Can I just integrate??
// func TotalEnergy = int3d(Th)((a*phitension)*0.25 * phi^2 * (1-phi)^2 + (phitension * eps) * 0.5 * abs(dx(phi) + dy(phi))^2)
//                     + lmda * (phiArea-A0)^2
//                     + int3d(Th)(phi * rhophitension * ((a)*0.25 * rho^2 * (1-rho)^2 + (eps) * 0.5 * abs(dx(rho) + dy(rho))^2))
//                     + lmdarho * (rhoArea - A0P)^2
//                     + lmdarhophi * (rhophiArea - A0RP)^2
//                     - int3d(Th) ( (phitension * phiinterface * ((eps) * curvature)));


// Initialisation
// Initial parameters of the drop
real dR = 0.6;  // Radius
real dRrho = 0.4;  // Radius
real dxc= 0.0;  // x coordinate
real dyc= 0.8;  // y coordinate, 0.2 is start above gorund
real dzc = 0.0;
real DropTh = sqrt((2*eps)/a);
real rhoDropTh = sqrt((2*eps)/a);
real dyct = 1.6; // dR + dyc will give same top point (half in half out)
real dzct=0.0;

// "Half lengths" in each direction for a 2:1 aspect ratio
real Lx = 3.0 * dR;  // x half-extent
real Ly = 1.0 * dR;  // y half-extent
real Lz = 3.0 * dR;  // x half-extent

func initPhi = 0.5 * (1.0- tanh(( max(abs((x - dxc) / Lx), abs((y - dyc) / Ly), abs((z-dzc)/Lz)) - 1.0 )/ DropTh)) //0.5 * (1-tanh((abs(y - dyc) - dR) / DropTh))// 0.5 * (1 - tanh((sqrt((x-dxc)^2 + (y-0.4-dyc)^2) - dR) / (sqrt(2) * DropTh)))
 + 0.5 * (1 - tanh((sqrt((x-dxc)^2 + (y-dyct)^2 + (z-dzct)^2) - dRrho) / (sqrt(2) * rhoDropTh)));
func initRho = 0.5 * (1 - tanh((sqrt((x-dxc)^2 + (y-dyct)^2 + (z-dzct)^2) - dRrho) / (sqrt(2) * rhoDropTh)));


// real sxmin=-0.6;
// real sxmax=0.6;
// real symin=1.3;
// real symax=1.9;

// func initPhi = 0.5 * (1-tanh((abs(y - dyc + 0.5) - dR) / DropTh))
//     //+ (y >= dyct) * 0.5 * (1 - tanh((sqrt((x - dxc)^2 + (y - dyct)^2) - dR) / (sqrt(2) * DropTh)));
//      + 0.25 * (tanh((x - sxmax)/DropTh) - tanh((x - sxmin)/DropTh)) * (tanh((y - symax)/DropTh) - tanh((y - symin)/DropTh));
// // func initRho = (y >= dyct) * 0.5 * (1 - tanh((sqrt((x - dxc)^2 + (y - dyct)^2) - dR) / (sqrt(2) * DropTh)));
// func initRho = 0.25 * (tanh((x - sxmax)/DropTh) - tanh((x - sxmin)/DropTh)) * (tanh((y - symax)/DropTh) - tanh((y - symin)/DropTh));

 
// func initPhi = 0.5 * (tanh((x - 0)/DropTh) - tanh((x - 1)/DropTh)); 
// func initRho = 0.5 * (tanh((x - 0)/DropTh) - tanh((x - 1)/DropTh)) ;
// cout << initRho << endl;


phi = initPhi;
rho = initRho;



// MakeRhoPhiMesh
// // Initial mesh adaptation
// getAdaptMesh
// // Reinitialise the function, since it has a known value, adapt mesh again
// phi = initPhi;
// rho = initRho;
// rhotwo = initRhoTwo;

// MakeRhoPhiMesh
// getAdaptMesh
// // Reinitialise the function, since it has a known value, adapt mesh again
// phi = initPhi;
// rho = initRho;
// rhotwo = initRhoTwo;

// MakeRhoPhiMesh
// getAdaptMesh
// // Final initialisation of the function
// phi = initPhi;
// rho = initRho;
// rhotwo = initRhoTwo;
// rhotwo =  rhotwo - (rho > 0.01) * rhotwo * rho^(1./4.);

// MakeRhoPhiMesh
// cout << "CURRENT AREA: " << phiArea << endl;
phi = fmin(phi,1);
phiold=phi;
rhoold=rho;
real overlapcheck = int3d(Th)((phi>1.001) * phi);
GetArea
A0 = phiArea-overlapcheck;
A0P = rhononphiArea;
A0RP = rhophiArea;

cout << "phi area is: " << A0 << endl;
cout << "rho area is: " << A0P << endl;

MakeRhoPhiMesh
// plot(Th, wait=true);
plot(RhoPhiPlot, wait=true, value=true, fill=true);


int nAdapt=0;
real curt=0.0;
// // Time stepping
int counter = 0;
bool recorded;
while(curt < endsim)//(maxCFL > 1e-4)
{
    // If needed, carry out mesh adaptation, solve again, adapt again
    if( nAdapt == dref)
    {
        // if (counter < 150)
        //     ElongateMesh(curt)
        cout << "    Mesh adpt 1, ";
        // getAdaptMesh
        cout << endl;
        nAdapt++;
        // plot(Th, wait=true);
        nAdapt = 0;
    }
    ++counter;

    // solve equations
    curt = curt+dt;
    solvePhase

    GetArea
    // probably need to change this upper bound to account for height differences?
    real ub1 = int3d(Th)(rho^2 * (3 - 2*rho));
    real lb1 = int3d(Th)((phi < rho) * phi * rho^2 * (3-2*rho) + (phi > rho) * rho^3 * (3 - 2*rho));
    real aratio1;
    if (ub1 > 0 && lb1 > 0)
        aratio1 =(rhophiArea-lb1) / (ub1 - lb1);
    else
        aratio1 = 0;
    real ub2 = int3d(Th)(rho^2 * (1 - rho) * (3 - 2*rho));
    real lb2 = 0;
    real aratio2=1-aratio1;//(rhononphiArea-lb2) / (ub2 - lb2);


    if (counter % 1 == 0)
    {
        cout << "Area aratio 1: " << aratio1 << endl;
        cout << "Area aratio 2: " << aratio2 << endl;
        cout << "ct = " << curt << ", ";
        cout << "phi area: " << phiArea << "  with constraint: " << A0 << endl;
        cout << "rho nonphi area: " << rhononphiArea << "  with constraint: " << A0P << endl;
        cout << "rhophi area: " << rhophiArea << " with constraint: " << A0RP << endl;
        // cout << "Value of addition param: " << addrate << endl;
    }

    // Prepare for the next time step
    rhoold = rho;
    phiold = phi;
    nAdapt++;

    if (curt < endrelaxation)
    {
        GetArea
        A0 = phiArea;
        rhoArea = int3d(Th)(rho^2 * (3 - 2*rho));
        rhoArealb = int3d(Th)((phi < rho) * phi * rho^2 * (3-2*rho) + (phi > rho) * rho^3 * (3 - 2*rho));


    }
    real diff = rhoArea - rhoArealb;

    if (aratio1 < 0)
    {
        aratio1 = 0;
        aratio2 = 1;
    }
    if (aratio1 > 1)
    {
        aratio1 = 1;
        aratio2 = 0;
    }

    A0RP = rhoArealb + diff * aratio1;
    A0P = diff * aratio2;

    if (counter % 8 == 0)
    {
        dummyphi = phi;

        for (int d = 0; d < 4; ++d)
        {
            DummyPhaseField;
            dummyphiold = dummyphi;     

            
        }

        absdelphi = sqrt(dx(dummyphi)^2 + dy(dummyphi)^2);
        phiinterface = (absdelphi > 1);



    }


    boolRhoPhitoPlot = (RhoPhiPlot < -0.05)*RhoPhiPlot + (RhoPhiPlot > 0.05)*RhoPhiPlot;

    MakeRhoPhiMesh

    // RhoPhiPlot = rho^2 * phi^2 * (1-phi)^2;
    if (rhophiArea < 0.01)
    {
        counter = PrintStep;
    }

    if (counter % screenStep == 0 && printScreen)
    {
        plot(RhoPhiPlot,fill=1,value=1, wait=false);
    }

    if (counter % PrintStep == 0 && doPrint)
    {
        string outputn = foldern + "image-" + curt + ".eps";
        plot(boolRhoPhitoPlot, ps=outputn, fill=1, wait=false);
        outputn = folderphi + "image-" + curt + ".eps";
        plot(phi, ps=outputn, fill=1, wait=false, value=true);
        outputn = folderrho + "image-" + curt + ".eps";
        plot(rho, ps=outputn, fill=1, wait=false, value=true);
        // outputn = folderrhotwo + "image-" + curt + ".eps";
        // plot(rhotwo, ps=outputn, fill=1, wait=false, value=true);
        

    }
    
    if (counter % 200 == 0 && printinterface)
    {
        string outputn2 = folderint1 + "image-" + curt + ".eps";
        string outputn3 = folderint2 + "image-" + curt + ".eps";
        plot(rhophiinterface, ps=outputn2, fill=1, wait=false);
        plot(rhooutside, ps=outputn3, fill=1, wait=false);
    }

    if (rhophiArea < 0.01)
    {
        curt = endsim;
    }


    if (makeData && curt > endsim-0.1 && recorded == false)
    {
        recorded = true;
        // matrix Vphi;
        // matrix Vrho;
        // matrix Vdiff;
        // Vphi.resize(maxcount, Vhfield.ndof);
        // Vrho.resize(maxcount, Vhfield.ndof);
        // Vdiff.resize(maxcount, Vhfield.ndof);
        string filen = datafolder + "phi_data" + parstr + ".dat";
        ofstream TheFile(filen);
        Vhfield xx=x;
        Vhfield yy=y;
        for(int i=0; i< Vhfield.ndof; ++i)
        {
            TheFile << xx[][i] << "\t" << yy[][i] << "\t" << phi[][i] << endl;
        }

        filen = datafolder + "rho_data" + parstr + ".dat";
        ofstream TheFilerho(filen);
        for(int i=0; i< Vhfield.ndof; ++i)
        {
            TheFilerho << xx[][i] << "\t" << yy[][i] << "\t" << rho[][i] << endl;
        }

        Vhfield diffregion = ((phi > 0.8) * (rhoold < 0.7) * diffparam * sqrt(dx(rho)+dy(rho)^2));
        filen = datafolder + "diff_data" + parstr + ".dat";
        ofstream TheFileDiff(filen);
        for(int i=0; i< Vhfield.ndof; ++i)
        {
            TheFileDiff << xx[][i] << "\t" << yy[][i] << "\t" << diffregion[][i] << endl;
        }
    }
    if (doTimespan && counter % timePrint == 0)
    {
        string filen = datafolder + "phi_data-" + curt + ".dat";
        ofstream TheFile(filen);
        Vhfield xx=x;
        Vhfield yy=y;
        for(int i=0; i< Vhfield.ndof; ++i)
        {
            TheFile << xx[][i] << "\t" << yy[][i] << "\t" << phi[][i] << endl;
        }

        filen = datafolder + "rho_data-" + curt + ".dat";
        ofstream TheFilerho(filen);
        for(int i=0; i< Vhfield.ndof; ++i)
        {
            TheFilerho << xx[][i] << "\t" << yy[][i] << "\t" << rho[][i] << endl;
        }

        Vhfield diffregion = ((phi > 0.8) * (rhoold < 0.7) * diffparam * sqrt(dx(rho)+dy(rho)^2));
        filen = datafolder + "diff_data-" + curt + ".dat";
        ofstream TheFileDiff(filen);
        for(int i=0; i< Vhfield.ndof; ++i)
        {
            TheFileDiff << xx[][i] << "\t" << yy[][i] << "\t" << diffregion[][i] << endl;
        }
    }



    if (PrintEnergy && counter % 10 == 0)
    {
        real t1 = int3d(Th)((a*phitension) * 0.25 * phi^2 * (1-phi)^2);
        real t2 = int3d(Th)((phitension * eps) * 0.5 * abs(dx(phi) + dy(phi))^2);
        real t3 = lmda * (phiArea-A0)^2;
        real t4 = int3d(Th) ( (phitension * phiinterface * ((eps) * curvature)));

        real t5 = int3d(Th)((rhotension * (1-phi) * (a)*0.25 * rho^2 * (1-rho)^2));
        real t6 = int3d(Th)((rhotension * (1-phi) * (eps) * 0.5 * abs(dx(rho) + dy(rho))^2));
        real t7 = lmdarho * (rhononphiArea - A0P)^2;
        // currently not removing curvature from rho.
        // real t8 = int3d(Th) ( (rhotwointerface * ((eps) * Rcurvature)));

        // coupling
        real t9 = int3d(Th)(phi * rhophitension * ((a)*0.25 * rho^2 * (1-rho)^2));
        real t10 = int3d(Th)(phi * rhophitension * ((eps) * 0.5 * abs(dx(rho) + dy(rho))^2));
        real t11 = lmdarhophi * (rhophiArea - A0RP)^2;
        real teng = t1+t2+t3-t4+t5+t6+t7+t9+t10+t11;

        if (counter == 10)
        {
            string filen = datafolder + "total_energy" + parstr + ".dat";
            ofstream TheFileEn(filen);
            TheFileEn << curt << "\t" << t1 << "\t" << t2 << "\t" << t3 << "\t" << t4 << "\t" << t5 << "\t" << t6 << "\t" << 
                        t7 << "\t" << t9 << "\t" << t10 << "\t" << t11 << "\t" << teng << endl;
        }
        else
        {
            string filen = datafolder + "total_energy" + parstr + ".dat";
            ofstream TheFileEn(filen, append);
            TheFileEn << curt << "\t" << t1 << "\t" << t2 << "\t" << t3 << "\t" << t4 << "\t" << t5 << "\t" << t6 << "\t" << 
                        t7 << "\t" << t9 << "\t" << t10 << "\t" << t11 << "\t" << teng << endl;
        }
       
    }
}

