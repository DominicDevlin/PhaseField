real dt = 0.0000001;  // time step
real epsilon = 0.01;  // interface width parameter
int nstep = 100000;  // number of time steps
real M = 0.1;

real error = 1e-6;
real glen = 1;
real initmesh = 10;

// Mesh and finite element space
// mesh Th = square(10, 10, fixedborder=1);  // Square domain

// Define the border of the square (0 <= x <= 1, 0 <= y <= 1)
border b1(t=0, glen){x=t; y=0; label=1;}   // Bottom border
border b2(t=0, 1){x=glen; y=t; label=2;}   // Right border
border b3(t=0, glen){x=glen-t; y=1; label=3;} // Top border
border b4(t=0, 1){x=0; y=1-t; label=4;} // Left border
// Build the mesh with boundary labels
mesh Th = buildmesh(b1(initmesh*glen) + b2(initmesh) + b3(initmesh*glen) + b4(initmesh), fixedborder=1); // Boundary labels 1, 2, 3, 4 for each side
// Visualize the mesh
plot(Th, wait=true);


fespace Vh(Th, P2);// periodic=[[1,x],[3,x],[2,y],[4,y]]);
// Define the fields
Vh phi, mu;  // phi is the phase field, mu is the chemical potential
Vh v;  // Test function
Vh vmu;
Vh psiprime;


// phi = sin(x/(pi));
// phi = 0.5 + tanh(20*(x-0.5))/2;
// phi = x;//0.5 + tanh(20*(sqrt((x-0.5)^2 + (y-0.5)^2) - 0.25))/2;

phi = 1 - 4*sqrt((x-0.5)*(x-0.5) + (y-0.5)*(y-0.5));
phi = max(phi,0);



Vh phiOld=phi;

// phi = sin(10*pi*x)*cos(10*pi*50);

// Initial condition for phi
plot(phi, wait=true, value=true);

// plot(Th, wait=true);

// Cahn-Hilliard weak form: (phi_new - phi_old) / dt = M * laplacian(mu)
problem cahnHilliard(phi, v) 
    = int2d(Th)((phi*v)/ dt)
    + int2d(Th)(M * (dx(mu) * dx(v) + dy(mu) * dy(v)))
    - int2d(Th)((phiOld*v)/dt)
    + on(2, phi=0)  // boundary condition
    + on(4, phi=0)
    + on(3, phi=0)
    + on(1, phi=0);
    // + on(1,2,3,4, (dx(phi) * N.x + dy(phi) * N.y) = 0);

// Chemical potential weak form: mu = psi'(phi) - epsilon^2 * laplacian(phi)
problem chemicalPotential(mu, vmu) 
    = int2d(Th)(mu * vmu)
    - int2d(Th)(psiprime * vmu)
    - int2d(Th)(epsilon * (dx(phi) * dx(vmu) + dy(phi) * dy(vmu)));


for (int i = 0; i < nstep; ++i) 
{  
    cout << "STARTING STEP NUMBER... " << i << endl;

  
    if (i % 1 == 0)
    {
        Th = adaptmesh(Th, phi, nbvx=40000, err=0.01, hmin=epsilon/4, hmax=epsilon/2);
    }
    
    cahnHilliard;
    psiprime =  phi * (1.0 - 2.0*phi^2);
    chemicalPotential;    

    phiOld = phi;

    


    for (int j = 0; j < 10; j++) 
    {
        real xval = Th(j*20).x;
        real yval = Th(j*20).y;
        cout << "Node " << j << " at (" << xval << ", " << yval << ") -> mu = " << mu(xval,yval) << " -    Phi is: " << phi(xval,yval) << endl;
    }
    // cout << "psiprime is: " << psiprime << endl;

    // phi = phi > 0.99 ? 1 : (phi < 0.01 ? 0 : phi);

    

    error = -abs(error);

	// phi = phi * (phi>0.0);
	// phi = phi * (phi<1.0) + (phi>=1.0)*1.0;

    // Visualization at each time step (optional)
    if (i % 1 == 0)
    {
        plot(phi, Th, cmm = "Phase field at step " + i, value=true, wait=true, fill=true);
        plot(Th, wait=true);
    }
}